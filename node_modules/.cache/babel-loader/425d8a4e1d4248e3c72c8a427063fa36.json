{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Next3Days/Next3Days.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\n\nconst Next3Days = () => {\n  _s();\n\n  const classes = useStyles();\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(true);\n  const [dailyForecast, setDailyForecast] = useState({});\n  useEffect(() => {\n    const getForecast = () => {\n      axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        console.log(data.data.forecast);\n        setIsForecast(true);\n      }).catch(error => console.log(error));\n    };\n\n    getForecast();\n  }, [days, location]); //   const getForecastDay = () => {\n  //     const forecast = dailyForecast.forecastday.map((forecastday) => {\n  //       return forecastday.date;\n  //     });\n  //     console.log(forecast);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: \"2\",\n    children: forecast && isForecast === true && /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: [\"Next 3 Days for \", forecast.location.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), dailyForecast.length > 0 ? dailyForecast.map(forecastday => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: format(new Date(forecastday.date), SHORT_DATE_FORMAT)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.root,\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [forecastday.day.avgtemp_c, SYMBOLS.DEGREES, \" \", \"\", forecastday.day.avgtemp_f, SYMBOLS.FAHRENHEIT]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunrise: \", forecastday.astro.sunrise]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunset: \", forecastday.astro.sunset]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: forecastday.day.condition.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n              className: classes.media,\n              image: forecastday.day.condition.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"none found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Next3Days, \"76RlcQFTiz9HAKoA97MMZ4ZkmkI=\", false, function () {\n  return [useStyles];\n});\n\n_c = Next3Days;\nexport default Next3Days;\n\nvar _c;\n\n$RefreshReg$(_c, \"Next3Days\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Next3Days/Next3Days.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","SHORT_DATE_FORMAT","useStyles","Grid","format","Next3Days","classes","forecast","setForecast","location","setLocation","days","isForecast","setIsForecast","dailyForecast","setDailyForecast","getForecast","get","process","env","REACT_APP_FORECAST_API","then","data","console","log","catch","error","name","length","map","forecastday","Date","date","root","text","day","avgtemp_c","DEGREES","avgtemp_f","FAHRENHEIT","astro","sunrise","sunset","condition","media","icon"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\n\nconst Next3Days = () => {\n  const classes = useStyles();\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(true);\n  const [dailyForecast, setDailyForecast] = useState({});\n\n  useEffect(() => {\n    const getForecast = () => {\n      axios\n        .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n        .then((data) => {\n          setForecast(data.data);\n          setDailyForecast(data.data.forecast);\n          console.log(data.data.forecast);\n          setIsForecast(true);\n        })\n        .catch((error) => console.log(error));\n    };\n    getForecast();\n  }, [days, location]);\n\n  //   const getForecastDay = () => {\n  //     const forecast = dailyForecast.forecastday.map((forecastday) => {\n  //       return forecastday.date;\n  //     });\n  //     console.log(forecast);\n  //   };\n\n  return (\n    <Grid container spacing=\"2\">\n      {forecast && isForecast === true && (\n        <Grid>\n          <Typography variant=\"h2\">\n            Next 3 Days for {forecast.location.name}\n          </Typography>\n\n          {dailyForecast.length > 0 ? (\n            dailyForecast.map((forecastday) => {\n              return (\n                <>\n                  <Grid xs={12}>\n                    {format(new Date(forecastday.date), SHORT_DATE_FORMAT)}\n                  </Grid>\n                  <Card className={classes.root}>\n                    <CardContent>\n                      <Typography className={classes.text}>\n                        {forecastday.day.avgtemp_c}\n                        {SYMBOLS.DEGREES} {\"\"}\n                        {forecastday.day.avgtemp_f}\n                        {SYMBOLS.FAHRENHEIT}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunrise: {forecastday.astro.sunrise}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunset: {forecastday.astro.sunset}\n                      </Typography>\n\n                      <Typography className={classes.text}>\n                        {forecastday.day.condition.text}\n                      </Typography>\n                    </CardContent>\n                    <CardMedia\n                      className={classes.media}\n                      image={forecastday.day.condition.icon}\n                    />\n                  </Card>\n                </>\n              );\n            })\n          ) : (\n            <Typography>none found</Typography>\n          )}\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Next3Days;\n"]},"metadata":{},"sourceType":"module"}