{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Next3Days/Next3Days.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT, VALID_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { Link } from \"react-router-dom\";\n\nconst Next3Days = () => {\n  _s();\n\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [forecast, setForecast] = useState(null);\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(format(new Date(selectedDate), VALID_DATE_FORMAT));\n  useEffect(() => {\n    const getForecast = () => {\n      axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        setIsForecast(true);\n      }).catch(error => console.log(error));\n    };\n\n    getForecast();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: \"2\",\n    children: forecast && isForecast === true && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: [\"Next 3 Days for \", forecast.location.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) //   {dailyForecast.forecastday.length > 0 ? (\n    //     dailyForecast.forecastday.map((forecastday) => {\n    //       return (\n    //         <Grid xs={12}>\n    //           {format(new Date(forecastday.date), SHORT_DATE_FORMAT)}\n    //          </Grid>\n    //       )\n    //     })\n    //   ):(null)}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Next3Days, \"u5lxkX6zYVXIRlih8btD4tpzZxk=\", false, function () {\n  return [useStyles];\n});\n\n_c = Next3Days;\nexport default Next3Days;\n\nvar _c;\n\n$RefreshReg$(_c, \"Next3Days\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Next3Days/Next3Days.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","SHORT_DATE_FORMAT","VALID_DATE_FORMAT","useStyles","Grid","format","Tab","Tabs","KeyboardDatePicker","Link","Next3Days","classes","input","setInput","weather","setWeather","activeTab","setActiveTab","forecast","setForecast","selectedDate","handleDateChange","Date","location","setLocation","days","isToday","setIsToday","isForecast","setIsForecast","dailyForecast","setDailyForecast","isHistory","setIsHistory","history","setHistory","historyForecast","setHistoryForecast","date","setDate","getForecast","get","process","env","REACT_APP_FORECAST_API","then","data","catch","error","console","log","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  SYMBOLS,\n  SHORT_DATE_FORMAT,\n  VALID_DATE_FORMAT,\n} from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { Link } from \"react-router-dom\";\n\nconst Next3Days = () => {\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [forecast, setForecast] = useState(null);\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(\n    format(new Date(selectedDate), VALID_DATE_FORMAT)\n  );\n\n  useEffect(() => {\n    const getForecast = () => {\n      axios\n        .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n        .then((data) => {\n          setForecast(data.data);\n          setDailyForecast(data.data.forecast);\n          setIsForecast(true);\n        })\n        .catch((error) => console.log(error));\n    };\n    getForecast();\n  }, []);\n\n  return (\n    <Grid container spacing=\"2\">\n      {forecast && isForecast === true && (\n        <Typography variant=\"h2\">\n          Next 3 Days for {forecast.location.name}\n        </Typography>\n        //   {dailyForecast.forecastday.length > 0 ? (\n        //     dailyForecast.forecastday.map((forecastday) => {\n        //       return (\n\n        //         <Grid xs={12}>\n        //           {format(new Date(forecastday.date), SHORT_DATE_FORMAT)}\n\n        //          </Grid>\n\n        //       )\n        //     })\n        //   ):(null)}\n      )}\n    </Grid>\n  );\n};\n\nexport default Next3Days;\n"]},"metadata":{},"sourceType":"module"}