{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Today/Today.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Today = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null); // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n\n  const [location, setLocation] = useState(\"belfast\");\n  const [isToday, setIsToday] = useState(true);\n  useEffect(() => {\n    getToday(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  const getToday = () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n      setWeather(data.data);\n      setIsToday(true);\n    }).catch(error => console.log(error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: \"2\",\n    children: weather && isToday === true && /*#__PURE__*/_jsxDEV(Grid, {\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"h4\",\n            className: classes.text,\n            children: weather.location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            className: classes.text,\n            children: weather.location.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", weather.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: weather.current.condition.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n          className: classes.media,\n          image: weather.current.condition.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Today, \"d2hlhuKwoo5QZT6kPDF2qpl+lVQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = Today;\nexport default Today;\n\nvar _c;\n\n$RefreshReg$(_c, \"Today\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Today/Today.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","useStyles","Geocode","Grid","Today","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","weather","setWeather","location","setLocation","isToday","setIsToday","getToday","get","REACT_APP_WEATHER_API","then","data","catch","error","console","log","root","text","name","country","current","temp_c","DEGREES","temp_f","FAHRENHEIT","condition","media","icon"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Today = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n  const [location, setLocation] = useState(\"belfast\");\n  const [isToday, setIsToday] = useState(true);\n  useEffect(() => {\n    getToday();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  const getToday = () => {\n    axios\n      .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n      .then((data) => {\n        setWeather(data.data);\n        setIsToday(true);\n      })\n      .catch((error) => console.log(error));\n  };\n  return (\n    <Grid container spacing=\"2\">\n      {weather && isToday === true && (\n        <Grid xs={12}>\n          <Typography variant=\"h2\">Today</Typography>\n          <Card className={classes.root}>\n            <CardContent>\n              <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                {weather.location.name}\n              </Typography>\n              <Typography variant=\"h5\" className={classes.text}>\n                {weather.location.country}\n              </Typography>\n              <Typography className={classes.text}>\n                {weather.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                {weather.current.temp_f} {SYMBOLS.FAHRENHEIT}\n              </Typography>\n              <Typography className={classes.text}>\n                {weather.current.condition.text}\n              </Typography>\n            </CardContent>\n            <CardMedia\n              className={classes.media}\n              image={weather.current.condition.icon}\n            />\n          </Card>\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Today;\n"]},"metadata":{},"sourceType":"module"}