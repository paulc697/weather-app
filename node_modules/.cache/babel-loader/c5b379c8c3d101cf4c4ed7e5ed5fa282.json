{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\n\nconst Weather = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null); // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({}); // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    getToday();\n  }, []);\n\n  const getToday = () => {\n    setIsForecast(false);\n    setIsForecast(false);\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n      setWeather(data.data);\n      setIsToday(true);\n    }).catch(error => console.log(error));\n  }; //Search event\n\n\n  const weatherInput = e => {\n    setInput(e.target.value);\n  };\n\n  const searchWeather = () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${input}`).then(data => {\n      setWeather(data.data);\n    });\n  };\n\n  const getForecast = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n      setForecast(data.data);\n      setDailyForecast(data.data.forecast);\n      setIsForecast(true);\n    }).catch(error => console.log(error));\n  };\n\n  const getHistory = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    axios.get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${days}`).then(data => {\n      setHistory(data.data);\n      setHistoryForecast(data.data.forecast);\n      setIsHistory(true);\n    }).catch(error => console.log(error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        className: classes.row,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: weatherInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: searchWeather,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getToday,\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getForecast,\n        children: \"Next 3 Days\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getHistory,\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), weather && isToday === true && /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Today\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: classes.root,\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h4\",\n              className: classes.text,\n              children: weather.location.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              className: classes.text,\n              children: weather.location.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.text,\n              children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", weather.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.text,\n              children: weather.current.condition.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n            className: classes.media,\n            image: weather.current.condition.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), forecast && isForecast === true && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: [\"Next 3 Days for \", forecast.location.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), dailyForecast.forecastday.length > 0 ? dailyForecast.forecastday.map(forecastday => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          xs: 12,\n          children: [format(new Date(forecastday.date), SHORT_DATE_FORMAT), /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.root,\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [forecastday.day.avgtemp_c, SYMBOLS.DEGREES, \" \", \"\", forecastday.day.avgtemp_f, SYMBOLS.FAHRENHEIT]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunrise: \", forecastday.astro.sunrise]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunset: \", forecastday.astro.sunset]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: forecastday.day.condition.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n              className: classes.media,\n              image: forecastday.day.condition.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No forecast found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Weather, \"kOyUzWFT2i3oISDKFQNTy/eIIIE=\", false, function () {\n  return [useStyles];\n});\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","SHORT_DATE_FORMAT","useStyles","Geocode","Grid","format","Weather","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","input","setInput","weather","setWeather","forecast","setForecast","location","setLocation","days","isToday","setIsToday","isForecast","setIsForecast","dailyForecast","setDailyForecast","isHistory","setIsHistory","history","setHistory","historyForecast","setHistoryForecast","getToday","get","REACT_APP_WEATHER_API","then","data","catch","error","console","log","weatherInput","e","target","value","searchWeather","getForecast","REACT_APP_FORECAST_API","getHistory","REACT_APP_HISTORY_API","row","root","text","name","country","current","temp_c","DEGREES","temp_f","FAHRENHEIT","condition","media","icon","forecastday","length","map","Date","date","day","avgtemp_c","avgtemp_f","astro","sunrise","sunset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\n\nconst Weather = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    getToday();\n  }, []);\n\n  const getToday = () => {\n    setIsForecast(false);\n    setIsForecast(false);\n    axios\n      .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n      .then((data) => {\n        setWeather(data.data);\n        setIsToday(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  //Search event\n  const weatherInput = (e) => {\n    setInput(e.target.value);\n  };\n\n  const searchWeather = () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${input}`).then((data) => {\n      setWeather(data.data);\n    });\n  };\n\n  const getForecast = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    axios\n      .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n      .then((data) => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        setIsForecast(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getHistory = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    axios\n      .get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${days}`)\n      .then((data) => {\n        setHistory(data.data);\n        setHistoryForecast(data.data.forecast);\n        setIsHistory(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <>\n      <Grid container spacing=\"2\">\n        <Grid item xs={6} className={classes.row}>\n          <Typography variant=\"h2\">Weather</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <input onChange={weatherInput} type=\"text\" />\n          <button onClick={searchWeather}>Search</button>\n        </Grid>\n        <button onClick={getToday}>Today</button>\n        <button onClick={getForecast}>Next 3 Days</button>\n        <button onClick={getHistory}>History</button>\n        {weather && isToday === true && (\n          <Grid xs={12}>\n            <Typography variant=\"h2\">Today</Typography>\n            <Card className={classes.root}>\n              <CardContent>\n                <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                  {weather.location.name}\n                </Typography>\n                <Typography variant=\"h5\" className={classes.text}>\n                  {weather.location.country}\n                </Typography>\n                <Typography className={classes.text}>\n                  {weather.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                  {weather.current.temp_f} {SYMBOLS.FAHRENHEIT}\n                </Typography>\n                <Typography className={classes.text}>\n                  {weather.current.condition.text}\n                </Typography>\n              </CardContent>\n              <CardMedia\n                className={classes.media}\n                image={weather.current.condition.icon}\n              />\n            </Card>\n          </Grid>\n        )}\n      </Grid>\n      {forecast && isForecast === true && (\n        <Grid container spacing=\"2\">\n          <Typography variant=\"h2\">\n            Next 3 Days for {forecast.location.name}\n          </Typography>\n          {dailyForecast.forecastday.length > 0 ? (\n            dailyForecast.forecastday.map((forecastday) => {\n              return (\n                <Grid xs={12}>\n                  {format(new Date(forecastday.date), SHORT_DATE_FORMAT)}\n                  <Card className={classes.root}>\n                    <CardContent>\n                      <Typography className={classes.text}>\n                        {forecastday.day.avgtemp_c}\n                        {SYMBOLS.DEGREES} {\"\"}\n                        {forecastday.day.avgtemp_f}\n                        {SYMBOLS.FAHRENHEIT}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunrise: {forecastday.astro.sunrise}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunset: {forecastday.astro.sunset}\n                      </Typography>\n\n                      <Typography className={classes.text}>\n                        {forecastday.day.condition.text}\n                      </Typography>\n                    </CardContent>\n                    <CardMedia\n                      className={classes.media}\n                      image={forecastday.day.condition.icon}\n                    />\n                  </Card>\n                </Grid>\n              );\n            })\n          ) : (\n            <Typography>No forecast found</Typography>\n          )}\n        </Grid>\n      )}\n    </>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}