{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\n\nconst Forecast = () => {\n  _s();\n\n  const classes = useStyles();\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [activeTab, setActiveTab] = useState(0);\n\n  const getForecast = () => {\n    axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n      setForecast(data.data);\n      setDailyForecast(data.data.forecast);\n      setIsForecast(true);\n    }).catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    getForecast();\n  }); //   const getForecastDay = () => {\n  //     const forecast = dailyForecast.forecastday.map((forecastday) => {\n  //       return forecastday.date;\n  //     });\n  //     console.log(forecast);\n  //   };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: \"2\",\n    children: forecast && /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: [\"Forecast for \", forecast.location.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), isForecast === true ? /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: activeTab,\n          indicatorColor: \"primary\",\n          textColor: \"primary\",\n          onChange: handleTabChange,\n          \"aria-label\": \"Weather Tab\",\n          variant: \"scrollable\",\n          children: dailyForecast.forecastday.map((forecastday, index) => {\n            return /*#__PURE__*/_jsxDEV(Tab, {\n              label: forecastday.date\n            }, `${forecastday.date}_tab_${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"nada\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Forecast, \"odWFOwelSVGuOnqVjRPeqSYuQyE=\", false, function () {\n  return [useStyles];\n});\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Forecast/Forecast.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","SHORT_DATE_FORMAT","useStyles","Grid","format","Tab","Tabs","Forecast","classes","forecast","setForecast","location","setLocation","days","isForecast","setIsForecast","dailyForecast","setDailyForecast","activeTab","setActiveTab","getForecast","get","process","env","REACT_APP_FORECAST_API","then","data","catch","error","console","log","handleTabChange","event","newValue","name","forecastday","map","index","date"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\n\nconst Forecast = () => {\n  const classes = useStyles();\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [activeTab, setActiveTab] = useState(0);\n\n  const getForecast = () => {\n    axios\n      .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n      .then((data) => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        setIsForecast(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  useEffect(() => {\n    getForecast();\n  });\n  //   const getForecastDay = () => {\n  //     const forecast = dailyForecast.forecastday.map((forecastday) => {\n  //       return forecastday.date;\n  //     });\n  //     console.log(forecast);\n  //   };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <Grid container spacing=\"2\">\n      {forecast && (\n        <Grid>\n          <Typography variant=\"h2\">\n            Forecast for {forecast.location.name}\n          </Typography>\n          {isForecast === true ? (\n            <Grid item xs={12}>\n              <Tabs\n                value={activeTab}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={handleTabChange}\n                aria-label=\"Weather Tab\"\n                variant=\"scrollable\"\n              >\n                {dailyForecast.forecastday.map((forecastday, index) => {\n                  return (\n                    <Tab\n                      key={`${forecastday.date}_tab_${index}`}\n                      label={forecastday.date}\n                    />\n                  );\n                })}\n              </Tabs>\n            </Grid>\n          ) : (\n            <Typography>nada</Typography>\n          )}\n          {/* {isForecast === true ? (\n            dailyForecast.forecastday.map((forecastday) => {\n              return (\n                <>\n                  {format(new Date(forecastday.date), SHORT_DATE_FORMAT)}\n\n                  <Card className={classes.root}>\n                    <CardContent>\n                      <Typography className={classes.text}>\n                        {forecastday.day.avgtemp_c}\n                        {SYMBOLS.DEGREES} {\"\"}\n                        {forecastday.day.avgtemp_f}\n                        {SYMBOLS.FAHRENHEIT}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunrise: {forecastday.astro.sunrise}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunset: {forecastday.astro.sunset}\n                      </Typography>\n\n                      <Typography className={classes.text}>\n                        {forecastday.day.condition.text}\n                      </Typography>\n                    </CardContent>\n                    <CardMedia\n                      className={classes.media}\n                      image={forecastday.day.condition.icon}\n                    />\n                  </Card>\n                </>\n              );\n            })\n          ) : (\n            <Typography>none found</Typography>\n          )} */}\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}