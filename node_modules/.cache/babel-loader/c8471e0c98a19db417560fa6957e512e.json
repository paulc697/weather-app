{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/SearchDetails/SearchDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, LONG_DATE_FORMAT, LONG_DATE_TIME_FORMAT, SHORT_DATE_FORMAT, VALID_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useParams } from \"react-router-dom\";\nimport Box from \"@material-ui/core/Box\";\nimport format from \"date-fns/format\";\nimport HourlyWeather from \"../../Components/HourlyWeather/HourlyWeather\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport useIsMobile from \"../../Components/useIsMobile/useIsMobile\";\nimport History from \"../History/History\";\n\nconst SearchDetails = () => {\n  _s();\n\n  const isMobile = useIsMobile();\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  const {\n    location: urlGroupId\n  } = useParams();\n  const [location, setLocation] = useState(\"\");\n  const [isToday, setIsToday] = useState(true);\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [forecast, setForecast] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [validDate, setValidDate] = useState(\"\");\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [selectedDate] = useState(new Date());\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(format(new Date(selectedDate), VALID_DATE_FORMAT));\n  useEffect(() => {\n    if (urlGroupId) {\n      setLocation(urlGroupId);\n    }\n  }, [urlGroupId]);\n\n  const dateToday = () => {\n    const date = format(new Date(), VALID_DATE_FORMAT);\n    setValidDate(date);\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  const getHistory = useCallback(async () => {\n    const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n    setDate(newDate);\n    axios.get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${date}`).then(data => {\n      setHistory(data.data);\n      console.log(data.data);\n      setHistoryForecast(data.data.forecast);\n      console.log(data.data.forecast);\n      setIsHistory(true);\n    }).catch(error => console.log(error));\n  }, [location, selectedDate, date]);\n  const getToday = useCallback(async () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n      setWeather(data.data);\n      setIsToday(true);\n    }).catch(error => console.log(error));\n  }, [location]);\n  const getForecast = useCallback(async () => {\n    axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n      setForecast(data.data);\n      setDailyForecast(data.data.forecast);\n      setIsForecast(true);\n    }).catch(error => console.log(error));\n  }, [days, location]);\n  useEffect(() => {\n    if (location !== \"\") {\n      getToday();\n      getForecast();\n      dateToday();\n      getHistory();\n    }\n  }, [location, getForecast, getHistory, getToday]); // const getMinDate = () => {\n  //   const date = new Date();\n  //   date.setDate(date.getDate() - 8);\n  //   console.log(date);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ml: 4,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [weather && isToday === true && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            mt: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h2\",\n              className: classes.title,\n              children: [\"Today in \", weather.location.name, \", \", \"\", \" \", weather.location.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              className: classes.time,\n              children: [\"Last Updated: \", \"\", format(new Date(weather.current.last_updated), LONG_DATE_TIME_FORMAT)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            mb: 2,\n            mt: 2,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              className: classes.subTitle,\n              children: format(new Date(weather.location.localtime), LONG_DATE_FORMAT)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          direction: \"row\",\n          justify: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 1,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: classes.media,\n                src: weather.current.condition.icon,\n                alt: \"weather\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 2,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.degrees,\n              children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.degrees,\n              children: weather.current.condition.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 6,\n        xs: 12,\n        children: forecast && isForecast === true && dailyForecast.forecastday.map((forecastday, index) => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: validDate === forecastday.date ? /*#__PURE__*/_jsxDEV(Card, {\n              className: weather.current.is_day === 1 ? classes.night : classes.root,\n              children: /*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  mb: 2,\n                  ml: 4,\n                  mr: -4,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    spacing: 2,\n                    justify: \"space-between\",\n                    children: [/*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 4,\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subTitle,\n                        children: [forecastday.day.mintemp_c, \" \", SYMBOLS.DEGREES]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 183,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subText,\n                        children: \"Low\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 186,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 182,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 4,\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subTitle,\n                        children: [forecastday.day.maxwind_mph, \" mph\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 191,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subText,\n                        children: \"Wind\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 194,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 4,\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subTitle,\n                        children: forecastday.astro.sunrise\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 199,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subText,\n                        children: \"Sunrise\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 202,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 198,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  ml: 4,\n                  mr: -4,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    spacing: 2,\n                    justify: \"space-between\",\n                    children: [/*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 4,\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subTitle,\n                        children: [forecastday.day.maxtemp_c, \" \", SYMBOLS.DEGREES]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 212,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subText,\n                        children: \"High\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 215,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 4,\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subTitle,\n                        children: forecastday.day.daily_will_it_rain === 1 ? \"Yes\" : \"No\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 220,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subText,\n                        children: \"Rain\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 225,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 219,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 4,\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subTitle,\n                        children: forecastday.astro.sunset\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 230,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.subText,\n                        children: \"Sunset\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 233,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 229,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }, this) : null\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      direction: \"row\",\n      justify: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          className: classes.title,\n          children: \"Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), isForecast === true ? /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Tabs, {\n            value: activeTab,\n            indicatorColor: \"primary\",\n            textColor: \"primary\",\n            onChange: handleTabChange,\n            \"aria-label\": \"Weather Tab\",\n            variant: \"scrollable\",\n            children: dailyForecast.forecastday.map((forecastday, index) => {\n              return /*#__PURE__*/_jsxDEV(Tab, {\n                label: format(new Date(forecastday.date), SHORT_DATE_FORMAT)\n              }, `${forecastday.date}_tab_${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No forecast Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: forecast && isForecast === true && dailyForecast.forecastday.map((forecastday, index) => {\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: activeTab === index && /*#__PURE__*/_jsxDEV(HourlyWeather, {\n                tabNumber: index,\n                forecastday: forecastday\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 23\n              }, this)\n            }, `display_weather_details_${forecastday.date}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), history && isHistory ? historyForecast.forecastday.map((histroyDay, index) => {\n      return /*#__PURE__*/_jsxDEV(History, {\n        histroyDay: histroyDay,\n        date: date,\n        selectedDate: selectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"No forecast found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchDetails, \"NwDWda5xHpyIc11Jf6xYdZ3KE+Y=\", false, function () {\n  return [useIsMobile, useStyles, useParams];\n});\n\n_c = SearchDetails;\nexport default SearchDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchDetails\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/SearchDetails/SearchDetails.js"],"names":["React","useEffect","useState","useCallback","axios","Card","CardContent","Typography","SYMBOLS","LONG_DATE_FORMAT","LONG_DATE_TIME_FORMAT","SHORT_DATE_FORMAT","VALID_DATE_FORMAT","useStyles","Grid","useParams","Box","format","HourlyWeather","Tab","Tabs","KeyboardDatePicker","useIsMobile","History","SearchDetails","isMobile","classes","weather","setWeather","location","urlGroupId","setLocation","isToday","setIsToday","days","isForecast","setIsForecast","dailyForecast","setDailyForecast","forecast","setForecast","activeTab","setActiveTab","validDate","setValidDate","isHistory","setIsHistory","history","setHistory","selectedDate","Date","historyForecast","setHistoryForecast","date","setDate","dateToday","handleTabChange","event","newValue","getHistory","newDate","toISOString","split","get","process","env","REACT_APP_HISTORY_API","then","data","console","log","catch","error","getToday","REACT_APP_WEATHER_API","getForecast","REACT_APP_FORECAST_API","title","name","country","time","current","last_updated","subTitle","localtime","media","condition","icon","degrees","temp_c","DEGREES","text","forecastday","map","index","is_day","night","root","day","mintemp_c","subText","maxwind_mph","astro","sunrise","maxtemp_c","daily_will_it_rain","sunset","histroyDay"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  SYMBOLS,\n  LONG_DATE_FORMAT,\n  LONG_DATE_TIME_FORMAT,\n  SHORT_DATE_FORMAT,\n  VALID_DATE_FORMAT,\n} from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useParams } from \"react-router-dom\";\nimport Box from \"@material-ui/core/Box\";\nimport format from \"date-fns/format\";\nimport HourlyWeather from \"../../Components/HourlyWeather/HourlyWeather\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport useIsMobile from \"../../Components/useIsMobile/useIsMobile\";\nimport History from \"../History/History\";\n\nconst SearchDetails = () => {\n  const isMobile = useIsMobile();\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  const { location: urlGroupId } = useParams();\n  const [location, setLocation] = useState(\"\");\n  const [isToday, setIsToday] = useState(true);\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [forecast, setForecast] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [validDate, setValidDate] = useState(\"\");\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [selectedDate] = useState(new Date());\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(\n    format(new Date(selectedDate), VALID_DATE_FORMAT)\n  );\n\n  useEffect(() => {\n    if (urlGroupId) {\n      setLocation(urlGroupId);\n    }\n  }, [urlGroupId]);\n\n  const dateToday = () => {\n    const date = format(new Date(), VALID_DATE_FORMAT);\n    setValidDate(date);\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  const getHistory = useCallback(async () => {\n    const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n    setDate(newDate);\n    axios\n      .get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${date}`)\n      .then((data) => {\n        setHistory(data.data);\n        console.log(data.data);\n        setHistoryForecast(data.data.forecast);\n        console.log(data.data.forecast);\n        setIsHistory(true);\n      })\n      .catch((error) => console.log(error));\n  }, [location, selectedDate, date]);\n\n  const getToday = useCallback(async () => {\n    axios\n      .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n      .then((data) => {\n        setWeather(data.data);\n        setIsToday(true);\n      })\n      .catch((error) => console.log(error));\n  }, [location]);\n\n  const getForecast = useCallback(async () => {\n    axios\n      .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n      .then((data) => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        setIsForecast(true);\n      })\n\n      .catch((error) => console.log(error));\n  }, [days, location]);\n\n  useEffect(() => {\n    if (location !== \"\") {\n      getToday();\n      getForecast();\n      dateToday();\n      getHistory();\n    }\n  }, [location, getForecast, getHistory, getToday]);\n\n  // const getMinDate = () => {\n  //   const date = new Date();\n  //   date.setDate(date.getDate() - 8);\n  //   console.log(date);\n  // };\n\n  return (\n    <Box ml={4}>\n      <Grid container spacing={2}>\n        {weather && isToday === true && (\n          <>\n            <Grid item xs={12}>\n              <Box mt={2}>\n                <Typography variant=\"h2\" className={classes.title}>\n                  Today in {weather.location.name}, {\"\"}{\" \"}\n                  {weather.location.country}\n                </Typography>\n                <Typography variant=\"h5\" className={classes.time}>\n                  Last Updated: {\"\"}\n                  {format(\n                    new Date(weather.current.last_updated),\n                    LONG_DATE_TIME_FORMAT\n                  )}\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={12}>\n              <Box mb={2} mt={2}>\n                <Typography variant=\"h5\" className={classes.subTitle}>\n                  {format(\n                    new Date(weather.location.localtime),\n                    LONG_DATE_FORMAT\n                  )}\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid container spacing={2} direction=\"row\" justify=\"space-between\">\n              <Grid item md={1} xs={4}>\n                <Box>\n                  <img\n                    className={classes.media}\n                    src={weather.current.condition.icon}\n                    alt=\"weather\"\n                  ></img>\n                </Box>\n              </Grid>\n              <Grid item md={2} xs={6}>\n                <Typography className={classes.degrees}>\n                  {weather.current.temp_c} {SYMBOLS.DEGREES}\n                </Typography>\n                <Typography className={classes.degrees}>\n                  {weather.current.condition.text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </>\n        )}\n\n        <Grid item md={6} xs={12}>\n          {forecast &&\n            isForecast === true &&\n            dailyForecast.forecastday.map((forecastday, index) => {\n              return (\n                <>\n                  {validDate === forecastday.date ? (\n                    <Card\n                      className={\n                        weather.current.is_day === 1\n                          ? classes.night\n                          : classes.root\n                      }\n                    >\n                      <CardContent>\n                        <Box mb={2} ml={4} mr={-4}>\n                          <Grid container spacing={2} justify=\"space-between\">\n                            <Grid item xs={4}>\n                              <Typography className={classes.subTitle}>\n                                {forecastday.day.mintemp_c} {SYMBOLS.DEGREES}\n                              </Typography>\n                              <Typography className={classes.subText}>\n                                Low\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={4}>\n                              <Typography className={classes.subTitle}>\n                                {forecastday.day.maxwind_mph} mph\n                              </Typography>\n                              <Typography className={classes.subText}>\n                                Wind\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={4}>\n                              <Typography className={classes.subTitle}>\n                                {forecastday.astro.sunrise}\n                              </Typography>\n                              <Typography className={classes.subText}>\n                                Sunrise\n                              </Typography>\n                            </Grid>\n                          </Grid>\n                        </Box>\n\n                        <Box ml={4} mr={-4}>\n                          <Grid container spacing={2} justify=\"space-between\">\n                            <Grid item xs={4}>\n                              <Typography className={classes.subTitle}>\n                                {forecastday.day.maxtemp_c} {SYMBOLS.DEGREES}\n                              </Typography>\n                              <Typography className={classes.subText}>\n                                High\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={4}>\n                              <Typography className={classes.subTitle}>\n                                {forecastday.day.daily_will_it_rain === 1\n                                  ? \"Yes\"\n                                  : \"No\"}\n                              </Typography>\n                              <Typography className={classes.subText}>\n                                Rain\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={4}>\n                              <Typography className={classes.subTitle}>\n                                {forecastday.astro.sunset}\n                              </Typography>\n                              <Typography className={classes.subText}>\n                                Sunset\n                              </Typography>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </CardContent>\n                    </Card>\n                  ) : null}\n                </>\n              );\n            })}\n        </Grid>\n      </Grid>\n\n      {/* FORECAST  */}\n      <Grid container spacing={2} direction=\"row\" justify=\"space-between\">\n        <Grid item xs={12}>\n          <Typography variant=\"h2\" className={classes.title}>\n            Forecast\n          </Typography>\n        </Grid>\n\n        <Grid>\n          <Typography variant=\"h2\"></Typography>\n          {isForecast === true ? (\n            <Grid item xs={12}>\n              <Tabs\n                value={activeTab}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={handleTabChange}\n                aria-label=\"Weather Tab\"\n                variant=\"scrollable\"\n              >\n                {dailyForecast.forecastday.map((forecastday, index) => {\n                  return (\n                    <Tab\n                      key={`${forecastday.date}_tab_${index}`}\n                      label={format(\n                        new Date(forecastday.date),\n                        SHORT_DATE_FORMAT\n                      )}\n                    />\n                  );\n                })}\n              </Tabs>\n            </Grid>\n          ) : (\n            <Typography>No forecast Available</Typography>\n          )}\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {forecast &&\n              isForecast === true &&\n              dailyForecast.forecastday.map((forecastday, index) => {\n                return (\n                  <React.Fragment\n                    key={`display_weather_details_${forecastday.date}`}\n                  >\n                    {activeTab === index && (\n                      <HourlyWeather\n                        tabNumber={index}\n                        forecastday={forecastday}\n                      />\n                    )}\n                  </React.Fragment>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n\n      {/* HISTORY */}\n      {history && isHistory ? (\n        historyForecast.forecastday.map((histroyDay, index) => {\n          return (\n            <History\n              histroyDay={histroyDay}\n              date={date}\n              selectedDate={selectedDate}\n            />\n          );\n        })\n      ) : (\n        <Typography>No forecast found</Typography>\n      )}\n    </Box>\n  );\n};\nexport default SearchDetails;\n"]},"metadata":{},"sourceType":"module"}