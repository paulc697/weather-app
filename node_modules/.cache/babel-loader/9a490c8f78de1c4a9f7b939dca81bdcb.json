{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Today/Today.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\n\nconst Today = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null); // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n\n  const [location] = useState(\"belfast\");\n  const [isToday, setIsToday] = useState(true);\n  const [degree, setDegrees] = useState(true); //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    const getToday = () => {\n      axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n        setWeather(data.data);\n        setIsToday(true);\n      }).catch(error => console.log(error));\n    };\n\n    getToday();\n  }, [location]);\n\n  const handleDegrees = () => {\n    if (degree === true) {\n      return weather.current.temp_c;\n    } else {\n      return weather.current.temp_f;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    children: weather && isToday === true && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Today\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: weather.current.is_day === 1 ? classes.day : classes.root,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h4\",\n              className: classes.text,\n              children: [weather.location.name, \" \", \"\", \"  \", weather.location.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            justify: \"space-between\",\n            justifyContent: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(CardMedia, {\n                className: classes.media,\n                image: weather.current.condition.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: /*#__PURE__*/_jsxDEV(\"buton\", {\n                  onClick: handleDegrees\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.subTitle,\n                children: [\"Wind: \", weather.current.wind_mph, \" kph \", \"\", \"Pressure: \", weather.current.pressure_mb, \" mb\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.text,\n              children: weather.current.condition.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Today, \"Tl4r49btK9ebw/zdirh4gW5QKMI=\", false, function () {\n  return [useStyles];\n});\n\n_c = Today;\nexport default Today;\n\nvar _c;\n\n$RefreshReg$(_c, \"Today\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Today/Today.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","useStyles","Geocode","Grid","Paper","Today","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","weather","setWeather","location","isToday","setIsToday","degree","setDegrees","getToday","get","REACT_APP_WEATHER_API","then","data","catch","error","console","log","handleDegrees","current","temp_c","temp_f","is_day","day","root","text","name","country","media","condition","icon","subTitle","wind_mph","pressure_mb"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\n\nconst Today = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n  const [location] = useState(\"belfast\");\n  const [isToday, setIsToday] = useState(true);\n  const [degree, setDegrees]= useState(true);\n\n  //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n  useEffect(() => {\n    const getToday = () => {\n      axios\n        .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n        .then((data) => {\n          setWeather(data.data);\n          setIsToday(true);\n        })\n        .catch((error) => console.log(error));\n    };\n    getToday();\n  }, [location]);\n\nconst handleDegrees = () => {\n  if (degree === true){\n    return (weather.current.temp_c)\n  } else {\n    return (weather.current.temp_f)\n  }\n}\n\n\n\n  return (\n    <Grid container spacing={2} justify=\"center\">\n      {weather && isToday === true && (\n          <>\n        <Grid item xs={12}>\n          <Typography variant=\"h2\">Today</Typography>\n        </Grid>\n          <Card className={weather.current.is_day === 1 ? classes.day : classes.root} >\n            <CardContent>\n              <Grid item xs={12}>\n              <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                {weather.location.name} {\"\"}  {weather.location.country}\n              </Typography>\n              </Grid>\n              <Grid container spacing={2} justify=\"space-between\" justifyContent=\"center\">\n              <Grid item xs={4}>\n                <CardMedia\n                    className={classes.media}\n                    image={weather.current.condition.icon}\n                />\n              </Grid>\n              <Grid item xs={4}>\n              <Typography className={classes.text}>\n                <buton onClick={handleDegrees}></buton>\n\n              </Typography>\n              </Grid>\n                <Grid item xs={4}>\n                  <Typography className={classes.subTitle}>\n                   Wind: {weather.current.wind_mph} kph {\"\"}\n                    Pressure: {weather.current.pressure_mb} mb\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography className={classes.text}>\n                  {weather.current.condition.text}\n                </Typography>\n              </Grid>\n            </CardContent>\n          </Card>\n          </>\n\n      )}\n\n    </Grid>\n\n  );\n};\n\nexport default Today;\n"]},"metadata":{},"sourceType":"module"}