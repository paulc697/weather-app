{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport WeatherCard from \"../../Components/WeatherCard/WeatherCard\";\n\nconst Forecast = () => {\n  _s();\n\n  const classes = useStyles();\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [activeTab, setActiveTab] = useState(0);\n  const getForecast = useCallback(async () => {\n    try {\n      const resp = await axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`);\n      if (!resp.ok) throw resp.status;\n      const respJson = await resp;\n      const weatherDates = (respJson === null || respJson === void 0 ? void 0 : respJson.weatherDates) || [];\n      console.log(weatherDates); // setForecast(data.data);\n      // console.log(data.data);\n      // setDailyForecast(data.data.forecast);\n\n      setIsForecast(true);\n    } catch (error) {\n      console.log(error);\n    } // axios\n    //   .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n    //   .then((data) => {\n    //     setForecast(data.data);\n    //     setDailyForecast(data.data.forecast);\n    //     setIsForecast(true);\n    //   })\n    //   .catch((error) => console.log(error));\n\n  }, [days, location]);\n  useEffect(() => {\n    getForecast();\n  }, [getForecast]);\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      className: classes.margin,\n      children: forecast && /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: [\"Forecast for \", forecast.location.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), isForecast === true ? /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Tabs, {\n            value: activeTab,\n            indicatorColor: \"primary\",\n            textColor: \"primary\",\n            onChange: handleTabChange,\n            \"aria-label\": \"Weather Tab\",\n            variant: \"scrollable\",\n            children: dailyForecast.forecastday.map((forecastday, index) => {\n              return /*#__PURE__*/_jsxDEV(Tab, {\n                label: format(new Date(forecastday.date), SHORT_DATE_FORMAT)\n              }, `${forecastday.date}_tab_${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No forecast Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.margin,\n      children: isForecast === true ? dailyForecast.forecastday.map((forecastday, index) => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: activeTab === index && /*#__PURE__*/_jsxDEV(WeatherCard, {\n            tabNumber: index,\n            forecastday: forecastday\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 19\n          }, this)\n        }, `display_weather_details_${forecastday.date}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No forecast Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Forecast, \"AMOdUgsODAoWfFYQoabhbsbdtf0=\", false, function () {\n  return [useStyles];\n});\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Forecast/Forecast.js"],"names":["React","useEffect","useState","useCallback","axios","Typography","SHORT_DATE_FORMAT","useStyles","Grid","format","Tab","Tabs","WeatherCard","Forecast","classes","forecast","setForecast","location","setLocation","days","isForecast","setIsForecast","dailyForecast","setDailyForecast","activeTab","setActiveTab","getForecast","resp","get","process","env","REACT_APP_FORECAST_API","ok","status","respJson","weatherDates","console","log","error","handleTabChange","event","newValue","margin","name","forecastday","map","index","Date","date"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport WeatherCard from \"../../Components/WeatherCard/WeatherCard\";\n\nconst Forecast = () => {\n  const classes = useStyles();\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [activeTab, setActiveTab] = useState(0);\n\n  const getForecast = useCallback(async () => {\n    try {\n      const resp = await axios.get(\n        `${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`\n      );\n      if (!resp.ok) throw resp.status;\n      const respJson = await resp;\n\n      const weatherDates = respJson?.weatherDates || [];\n      console.log(weatherDates);\n      // setForecast(data.data);\n      // console.log(data.data);\n      // setDailyForecast(data.data.forecast);\n      setIsForecast(true);\n    } catch (error) {\n      console.log(error);\n    }\n    // axios\n    //   .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n    //   .then((data) => {\n    //     setForecast(data.data);\n    //     setDailyForecast(data.data.forecast);\n    //     setIsForecast(true);\n    //   })\n\n    //   .catch((error) => console.log(error));\n  }, [days, location]);\n\n  useEffect(() => {\n    getForecast();\n  }, [getForecast]);\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <>\n      <Grid container spacing=\"2\" className={classes.margin}>\n        {forecast && (\n          <Grid>\n            <Typography variant=\"h2\">\n              Forecast for {forecast.location.name}\n            </Typography>\n            {isForecast === true ? (\n              <Grid item xs={12}>\n                <Tabs\n                  value={activeTab}\n                  indicatorColor=\"primary\"\n                  textColor=\"primary\"\n                  onChange={handleTabChange}\n                  aria-label=\"Weather Tab\"\n                  variant=\"scrollable\"\n                >\n                  {dailyForecast.forecastday.map((forecastday, index) => {\n                    return (\n                      <Tab\n                        key={`${forecastday.date}_tab_${index}`}\n                        label={format(\n                          new Date(forecastday.date),\n                          SHORT_DATE_FORMAT\n                        )}\n                      />\n                    );\n                  })}\n                </Tabs>\n              </Grid>\n            ) : (\n              <Typography>No forecast Available</Typography>\n            )}\n          </Grid>\n        )}\n      </Grid>\n\n      <Grid item xs={12} className={classes.margin}>\n        {isForecast === true ? (\n          dailyForecast.forecastday.map((forecastday, index) => {\n            return (\n              <React.Fragment\n                key={`display_weather_details_${forecastday.date}`}\n              >\n                {activeTab === index && (\n                  <WeatherCard tabNumber={index} forecastday={forecastday} />\n                )}\n              </React.Fragment>\n            );\n          })\n        ) : (\n          <Typography>No forecast Available</Typography>\n        )}\n      </Grid>\n    </>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}