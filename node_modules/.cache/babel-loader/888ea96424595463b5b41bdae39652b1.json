{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Symbols\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\n\nconst Weather = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [location, setLocation] = useState(\"\"); // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=Belfast`).then(data => {\n      setWeather(data.data);\n      console.log(data.data);\n    }).catch(error => console.log(error));\n  }, [location]); //Search event\n\n  const weatherInput = e => {\n    setInput(e.target.value);\n  };\n\n  const searchWeather = () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${input}`).then(data => {\n      setWeather(data.data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: weatherInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: searchWeather,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), weather && /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"h4\",\n            className: classes.text,\n            children: weather.location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            className: classes.text,\n            children: weather.location.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", weather.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: weather.current.condition.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n          className: classes.media,\n          image: weather.current.condition.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Weather, \"WnltiWVq6jNsj9Vo5b+tTLH6AKI=\", false, function () {\n  return [useStyles];\n});\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","useStyles","Geocode","Weather","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","input","setInput","weather","setWeather","latitude","setLatitude","longitude","setLongitude","location","setLocation","get","REACT_APP_WEATHER_API","then","data","console","log","catch","error","weatherInput","e","target","value","searchWeather","root","text","name","country","current","temp_c","DEGREES","temp_f","FAHRENHEIT","condition","media","icon"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Symbols\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\n\nconst Weather = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_WEATHER_API}=Belfast`)\n      .then((data) => {\n        setWeather(data.data);\n        console.log(data.data);\n      })\n      .catch((error) => console.log(error));\n  }, [location]);\n\n  //Search event\n  const weatherInput = (e) => {\n    setInput(e.target.value);\n  };\n\n  const searchWeather = () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${input}`).then((data) => {\n      setWeather(data.data);\n    });\n  };\n  return (\n    <div>\n      <Typography variant=\"h2\">Weather</Typography>\n      <div>\n        <div>\n          <input onChange={weatherInput} type=\"text\" />\n          <button onClick={searchWeather}>Search</button>\n        </div>\n        {weather && (\n          <Card className={classes.root}>\n            <CardContent>\n              <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                {weather.location.name}\n              </Typography>\n              <Typography variant=\"h5\" className={classes.text}>\n                {weather.location.country}\n              </Typography>\n              <Typography className={classes.text}>\n                {weather.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                {weather.current.temp_f} {SYMBOLS.FAHRENHEIT}\n              </Typography>\n              <Typography className={classes.text}>\n                {weather.current.condition.text}\n              </Typography>\n            </CardContent>\n            <CardMedia\n              className={classes.media}\n              image={weather.current.condition.icon}\n            />\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}