{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/SearchDetails/SearchDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, LONG_DATE_FORMAT, LONG_DATE_TIME_FORMAT, SHORT_DATE_FORMAT, VALID_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useParams } from \"react-router-dom\";\nimport Box from \"@material-ui/core/Box\";\nimport format from \"date-fns/format\";\nimport HourlyWeather from \"../../Components/HourlyWeather/HourlyWeather\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nconst SearchDetails = () => {\n  _s();\n\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  const {\n    location: urlGroupId\n  } = useParams();\n  const [location, setLocation] = useState(\"\");\n  const [isToday, setIsToday] = useState(true);\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [forecast, setForecast] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [validDate, setValidDate] = useState(\"\");\n  const [isHistory, setIsHistory] = useState(false);\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(format(new Date(selectedDate), VALID_DATE_FORMAT));\n  useEffect(() => {\n    if (urlGroupId) {\n      setLocation(urlGroupId);\n    }\n  }, [urlGroupId]);\n  useEffect(() => {\n    if (location !== \"\") {\n      getToday();\n      getForecast();\n      dateToday();\n    }\n  }, [location]);\n\n  const dateToday = () => {\n    const date = format(new Date(), VALID_DATE_FORMAT);\n    setValidDate(date);\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  const getHistory = useCallback(async () => {\n    const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n    setDate(newDate);\n    axios.get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${date}`).then(data => {\n      setHistory(data.data.forecast);\n      setHistoryForecast(data.data.forecast);\n      console.log(data.data.forecast);\n      setIsHistory(true);\n    }).catch(error => console.log(error));\n  }, [location, selectedDate, date]);\n  useEffect(() => {\n    getHistory();\n  }, [getHistory]);\n  const getToday = useCallback(async () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n      setWeather(data.data);\n      setIsToday(true);\n    }).catch(error => console.log(error));\n  }, [location]);\n  const getForecast = useCallback(async () => {\n    axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n      setForecast(data.data);\n      setDailyForecast(data.data.forecast);\n      setIsForecast(true);\n    }).catch(error => console.log(error));\n  }, [days, location]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ml: 4,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: weather && isToday === true && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            mt: 2,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h2\",\n              className: classes.title,\n              children: [\"Today in \", weather.location.name, \", \", \"\", \" \", weather.location.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            mb: 2,\n            mt: 2,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              className: classes.subTitle,\n              children: format(new Date(weather.location.localtime), LONG_DATE_FORMAT)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          direction: \"row\",\n          justify: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 1,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: classes.media,\n                src: weather.current.condition.icon,\n                alt: \"weather\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 2,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.degrees,\n              children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.degrees,\n              children: weather.current.condition.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 6,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              className: weather.current.is_day === 1 ? classes.night : classes.root,\n              children: /*#__PURE__*/_jsxDEV(CardContent, {\n                children: forecast && isForecast === true && dailyForecast.forecastday.map((forecastday, index) => {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [validDate === forecastday.date ? /*#__PURE__*/_jsxDEV(Box, {\n                      mb: 2,\n                      ml: 4,\n                      mr: -4,\n                      children: /*#__PURE__*/_jsxDEV(Grid, {\n                        container: true,\n                        spacing: 2,\n                        justify: \"space-between\",\n                        children: [/*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          xs: 4,\n                          children: [/*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subTitle,\n                            children: [forecastday.day.mintemp_c, \" \", SYMBOLS.DEGREES]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 169,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subText,\n                            children: \"Low\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 173,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 168,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          xs: 4,\n                          children: [/*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subTitle,\n                            children: [forecastday.day.maxwind_mph, \" mph\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 178,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subText,\n                            children: \"Wind\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 181,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 177,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          xs: 4,\n                          children: [/*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subTitle,\n                            children: forecastday.astro.sunrise\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 186,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subText,\n                            children: \"Sunrise\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 189,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 185,\n                          columnNumber: 35\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 163,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 31\n                    }, this) : null, validDate === forecastday.date ? /*#__PURE__*/_jsxDEV(Box, {\n                      ml: 4,\n                      mr: -4,\n                      children: /*#__PURE__*/_jsxDEV(Grid, {\n                        container: true,\n                        spacing: 2,\n                        justify: \"space-between\",\n                        children: [/*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          xs: 4,\n                          children: [/*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subTitle,\n                            children: [forecastday.day.maxtemp_c, \" \", SYMBOLS.DEGREES]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 204,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subText,\n                            children: \"High\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 208,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 203,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          xs: 4,\n                          children: [/*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subTitle,\n                            children: forecastday.day.daily_will_it_rain === 1 ? \"Yes\" : \"No\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 213,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subText,\n                            children: \"Rain\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 218,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 212,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          xs: 4,\n                          children: [/*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subTitle,\n                            children: forecastday.astro.sunset\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 223,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.subText,\n                            children: \"Sunset\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 226,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 222,\n                          columnNumber: 35\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 198,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 31\n                    }, this) : null]\n                  }, void 0, true);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          direction: \"row\",\n          justify: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h2\",\n              className: classes.title,\n              children: \"Forecast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), isForecast === true ? /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Tabs, {\n                value: activeTab,\n                indicatorColor: \"primary\",\n                textColor: \"primary\",\n                onChange: handleTabChange,\n                \"aria-label\": \"Weather Tab\",\n                variant: \"scrollable\",\n                children: dailyForecast.forecastday.map((forecastday, index) => {\n                  return /*#__PURE__*/_jsxDEV(Tab, {\n                    label: format(new Date(forecastday.date), SHORT_DATE_FORMAT)\n                  }, `${forecastday.date}_tab_${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 262,\n                    columnNumber: 27\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n              children: \"No forecast Available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [forecast && isForecast === true && dailyForecast.forecastday.map((forecastday, index) => {\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: activeTab === index && /*#__PURE__*/_jsxDEV(HourlyWeather, {\n                  tabNumber: index,\n                  forecastday: forecastday\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 27\n                }, this)\n              }, `display_weather_details_${forecastday.date}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 23\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: \"2\",\n              children: history && /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: \"2\",\n                children: isHistory === true ? historyForecast.forecastday.map((forecastday, index) => {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h2\",\n                      children: forecastday.location.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 304,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 12,\n                      children: [/*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n                          label: \"Select Date\",\n                          clearable: true,\n                          maxDate: new Date(),\n                          format: \"yyyy/MM/dd\",\n                          value: selectedDate,\n                          onChange: date => handleDateChange(date)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 309,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 308,\n                        columnNumber: 35\n                      }, this), format(new Date(forecastday.date), VALID_DATE_FORMAT), /*#__PURE__*/_jsxDEV(Card, {\n                        className: classes.root,\n                        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n                          children: [/*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.text,\n                            children: [forecastday.day.avgtemp_c, SYMBOLS.DEGREES, \" \", \"\", forecastday.day.avgtemp_f, SYMBOLS.FAHRENHEIT]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 326,\n                            columnNumber: 39\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.text,\n                            children: [\"Sunrise: \", forecastday.astro.sunrise]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 332,\n                            columnNumber: 39\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.text,\n                            children: [\"Sunset: \", forecastday.astro.sunset]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 335,\n                            columnNumber: 39\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.text,\n                            children: forecastday.day.condition.text\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 339,\n                            columnNumber: 39\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 325,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n                          className: classes.media,\n                          image: forecastday.day.condition.icon\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 343,\n                          columnNumber: 37\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 324,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 307,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true);\n                }) : /*#__PURE__*/_jsxDEV(Typography, {\n                  children: \"No forecast found\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              mt: 4,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  className: classes.subTitle,\n                  children: [\"Last Updated: \", \"\", format(new Date(weather.current.last_updated), LONG_DATE_TIME_FORMAT)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchDetails, \"NdU2Cp+qX/+HRckOtQwE0xROwu0=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = SearchDetails;\nexport default SearchDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchDetails\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/SearchDetails/SearchDetails.js"],"names":["React","useEffect","useState","useCallback","axios","Card","CardContent","Typography","SYMBOLS","LONG_DATE_FORMAT","LONG_DATE_TIME_FORMAT","SHORT_DATE_FORMAT","VALID_DATE_FORMAT","useStyles","Grid","useParams","Box","format","HourlyWeather","Tab","Tabs","KeyboardDatePicker","CardMedia","SearchDetails","classes","weather","setWeather","location","urlGroupId","setLocation","isToday","setIsToday","days","isForecast","setIsForecast","dailyForecast","setDailyForecast","forecast","setForecast","activeTab","setActiveTab","validDate","setValidDate","isHistory","setIsHistory","selectedDate","handleDateChange","Date","history","setHistory","historyForecast","setHistoryForecast","date","setDate","getToday","getForecast","dateToday","handleTabChange","event","newValue","getHistory","newDate","toISOString","split","get","process","env","REACT_APP_HISTORY_API","then","data","console","log","catch","error","REACT_APP_WEATHER_API","REACT_APP_FORECAST_API","title","name","country","subTitle","localtime","media","current","condition","icon","degrees","temp_c","DEGREES","text","is_day","night","root","forecastday","map","index","day","mintemp_c","subText","maxwind_mph","astro","sunrise","maxtemp_c","daily_will_it_rain","sunset","avgtemp_c","avgtemp_f","FAHRENHEIT","last_updated"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  SYMBOLS,\n  LONG_DATE_FORMAT,\n  LONG_DATE_TIME_FORMAT,\n  SHORT_DATE_FORMAT,\n  VALID_DATE_FORMAT,\n} from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useParams } from \"react-router-dom\";\nimport Box from \"@material-ui/core/Box\";\nimport format from \"date-fns/format\";\nimport HourlyWeather from \"../../Components/HourlyWeather/HourlyWeather\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nconst SearchDetails = () => {\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  const { location: urlGroupId } = useParams();\n  const [location, setLocation] = useState(\"\");\n  const [isToday, setIsToday] = useState(true);\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [forecast, setForecast] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [validDate, setValidDate] = useState(\"\");\n  const [isHistory, setIsHistory] = useState(false);\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(\n    format(new Date(selectedDate), VALID_DATE_FORMAT)\n  );\n\n  useEffect(() => {\n    if (urlGroupId) {\n      setLocation(urlGroupId);\n    }\n  }, [urlGroupId]);\n\n  useEffect(() => {\n    if (location !== \"\") {\n      getToday();\n      getForecast();\n      dateToday();\n    }\n  }, [location]);\n\n  const dateToday = () => {\n    const date = format(new Date(), VALID_DATE_FORMAT);\n    setValidDate(date);\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  const getHistory = useCallback(async () => {\n    const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n    setDate(newDate);\n    axios\n      .get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${date}`)\n      .then((data) => {\n        setHistory(data.data.forecast);\n        setHistoryForecast(data.data.forecast);\n        console.log(data.data.forecast);\n        setIsHistory(true);\n      })\n      .catch((error) => console.log(error));\n  }, [location, selectedDate, date]);\n\n  useEffect(() => {\n    getHistory();\n  }, [getHistory]);\n\n  const getToday = useCallback(async () => {\n    axios\n      .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n      .then((data) => {\n        setWeather(data.data);\n        setIsToday(true);\n      })\n      .catch((error) => console.log(error));\n  }, [location]);\n\n  const getForecast = useCallback(async () => {\n    axios\n      .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n      .then((data) => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        setIsForecast(true);\n      })\n\n      .catch((error) => console.log(error));\n  }, [days, location]);\n\n  return (\n    <Box ml={4}>\n      <Grid container spacing={2}>\n        {weather && isToday === true && (\n          <>\n            <Grid item xs={12}>\n              <Box mt={2}>\n                <Typography variant=\"h2\" className={classes.title}>\n                  Today in {weather.location.name}, {\"\"}{\" \"}\n                  {weather.location.country}\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={12}>\n              <Box mb={2} mt={2}>\n                <Typography variant=\"h5\" className={classes.subTitle}>\n                  {format(\n                    new Date(weather.location.localtime),\n                    LONG_DATE_FORMAT\n                  )}\n                </Typography>\n              </Box>\n            </Grid>\n\n            <Grid container spacing={2} direction=\"row\" justify=\"space-between\">\n              <Grid item md={1} xs={12}>\n                <Box>\n                  <img\n                    className={classes.media}\n                    src={weather.current.condition.icon}\n                    alt=\"weather\"\n                  ></img>\n                </Box>\n              </Grid>\n              <Grid item md={2} xs={12}>\n                <Typography className={classes.degrees}>\n                  {weather.current.temp_c} {SYMBOLS.DEGREES}\n                </Typography>\n                <Typography className={classes.degrees}>\n                  {weather.current.condition.text}\n                </Typography>\n              </Grid>\n              <Grid item md={6} xs={12}>\n                <Card\n                  className={\n                    weather.current.is_day === 1 ? classes.night : classes.root\n                  }\n                >\n                  <CardContent>\n                    {forecast &&\n                      isForecast === true &&\n                      dailyForecast.forecastday.map((forecastday, index) => {\n                        return (\n                          <>\n                            {validDate === forecastday.date ? (\n                              <Box mb={2} ml={4} mr={-4}>\n                                <Grid\n                                  container\n                                  spacing={2}\n                                  justify=\"space-between\"\n                                >\n                                  <Grid item xs={4}>\n                                    <Typography className={classes.subTitle}>\n                                      {forecastday.day.mintemp_c}{\" \"}\n                                      {SYMBOLS.DEGREES}\n                                    </Typography>\n                                    <Typography className={classes.subText}>\n                                      Low\n                                    </Typography>\n                                  </Grid>\n                                  <Grid item xs={4}>\n                                    <Typography className={classes.subTitle}>\n                                      {forecastday.day.maxwind_mph} mph\n                                    </Typography>\n                                    <Typography className={classes.subText}>\n                                      Wind\n                                    </Typography>\n                                  </Grid>\n                                  <Grid item xs={4}>\n                                    <Typography className={classes.subTitle}>\n                                      {forecastday.astro.sunrise}\n                                    </Typography>\n                                    <Typography className={classes.subText}>\n                                      Sunrise\n                                    </Typography>\n                                  </Grid>\n                                </Grid>\n                              </Box>\n                            ) : null}\n                            {validDate === forecastday.date ? (\n                              <Box ml={4} mr={-4}>\n                                <Grid\n                                  container\n                                  spacing={2}\n                                  justify=\"space-between\"\n                                >\n                                  <Grid item xs={4}>\n                                    <Typography className={classes.subTitle}>\n                                      {forecastday.day.maxtemp_c}{\" \"}\n                                      {SYMBOLS.DEGREES}\n                                    </Typography>\n                                    <Typography className={classes.subText}>\n                                      High\n                                    </Typography>\n                                  </Grid>\n                                  <Grid item xs={4}>\n                                    <Typography className={classes.subTitle}>\n                                      {forecastday.day.daily_will_it_rain === 1\n                                        ? \"Yes\"\n                                        : \"No\"}\n                                    </Typography>\n                                    <Typography className={classes.subText}>\n                                      Rain\n                                    </Typography>\n                                  </Grid>\n                                  <Grid item xs={4}>\n                                    <Typography className={classes.subTitle}>\n                                      {forecastday.astro.sunset}\n                                    </Typography>\n                                    <Typography className={classes.subText}>\n                                      Sunset\n                                    </Typography>\n                                  </Grid>\n                                </Grid>\n                              </Box>\n                            ) : null}\n                          </>\n                        );\n                      })}\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n            <Grid container spacing={2} direction=\"row\" justify=\"space-between\">\n              <Grid item xs={12}>\n                <Typography variant=\"h2\" className={classes.title}>\n                  Forecast\n                </Typography>\n              </Grid>\n\n              {/* FORECAST  */}\n              <Grid>\n                <Typography variant=\"h2\"></Typography>\n                {isForecast === true ? (\n                  <Grid item xs={12}>\n                    <Tabs\n                      value={activeTab}\n                      indicatorColor=\"primary\"\n                      textColor=\"primary\"\n                      onChange={handleTabChange}\n                      aria-label=\"Weather Tab\"\n                      variant=\"scrollable\"\n                    >\n                      {dailyForecast.forecastday.map((forecastday, index) => {\n                        return (\n                          <Tab\n                            key={`${forecastday.date}_tab_${index}`}\n                            label={format(\n                              new Date(forecastday.date),\n                              SHORT_DATE_FORMAT\n                            )}\n                          />\n                        );\n                      })}\n                    </Tabs>\n                  </Grid>\n                ) : (\n                  <Typography>No forecast Available</Typography>\n                )}\n              </Grid>\n\n              <Grid item xs={12}>\n                {forecast &&\n                  isForecast === true &&\n                  dailyForecast.forecastday.map((forecastday, index) => {\n                    return (\n                      <React.Fragment\n                        key={`display_weather_details_${forecastday.date}`}\n                      >\n                        {activeTab === index && (\n                          <HourlyWeather\n                            tabNumber={index}\n                            forecastday={forecastday}\n                          />\n                        )}\n                      </React.Fragment>\n                    );\n                  })}\n\n                <Grid container spacing=\"2\">\n                  {history && (\n                    <Grid container spacing=\"2\">\n                      {isHistory === true ? (\n                        historyForecast.forecastday.map(\n                          (forecastday, index) => {\n                            return (\n                              <>\n                                <Typography variant=\"h2\">\n                                  {forecastday.location.name}\n                                </Typography>\n                                <Grid item xs={12}>\n                                  <Grid item xs={12}>\n                                    <KeyboardDatePicker\n                                      label=\"Select Date\"\n                                      clearable\n                                      maxDate={new Date()}\n                                      format=\"yyyy/MM/dd\"\n                                      value={selectedDate}\n                                      onChange={(date) =>\n                                        handleDateChange(date)\n                                      }\n                                    />\n                                  </Grid>\n                                  {format(\n                                    new Date(forecastday.date),\n                                    VALID_DATE_FORMAT\n                                  )}\n                                  <Card className={classes.root}>\n                                    <CardContent>\n                                      <Typography className={classes.text}>\n                                        {forecastday.day.avgtemp_c}\n                                        {SYMBOLS.DEGREES} {\"\"}\n                                        {forecastday.day.avgtemp_f}\n                                        {SYMBOLS.FAHRENHEIT}\n                                      </Typography>\n                                      <Typography className={classes.text}>\n                                        Sunrise: {forecastday.astro.sunrise}\n                                      </Typography>\n                                      <Typography className={classes.text}>\n                                        Sunset: {forecastday.astro.sunset}\n                                      </Typography>\n\n                                      <Typography className={classes.text}>\n                                        {forecastday.day.condition.text}\n                                      </Typography>\n                                    </CardContent>\n                                    <CardMedia\n                                      className={classes.media}\n                                      image={forecastday.day.condition.icon}\n                                    />\n                                  </Card>\n                                </Grid>\n                              </>\n                            );\n                          }\n                        )\n                      ) : (\n                        <Typography>No forecast found</Typography>\n                      )}\n                    </Grid>\n                  )}\n                </Grid>\n\n                <Box mt={4}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h5\" className={classes.subTitle}>\n                      Last Updated: {\"\"}\n                      {format(\n                        new Date(weather.current.last_updated),\n                        LONG_DATE_TIME_FORMAT\n                      )}\n                    </Typography>\n                  </Grid>\n                </Box>\n              </Grid>\n            </Grid>\n          </>\n        )}\n      </Grid>\n    </Box>\n  );\n};\nexport default SearchDetails;\n"]},"metadata":{},"sourceType":"module"}