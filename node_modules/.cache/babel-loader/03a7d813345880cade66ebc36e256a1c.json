{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Today/Today.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Today = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [location, setLocation] = useState(\"belfast\");\n  const [isToday, setIsToday] = useState(true); // Geolocation\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n    Geocode.fromLatLng(latitude, longitude).then(response => {\n      const address = response.results[0].formatted_address;\n      setLocation(address);\n    }, error => {\n      console.error(error);\n    });\n  });\n  useEffect(() => {\n    const getToday = () => {\n      axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n        setWeather(data.data);\n        setIsToday(true);\n      }).catch(error => console.log(error));\n    };\n\n    getToday();\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    children: weather && isToday === true && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Today\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: weather.current.is_day === 1 ? classes.day : classes.root,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h4\",\n              className: classes.title,\n              children: [weather.location.name, \" \", \"\", \" \", weather.location.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            justify: \"space-between\",\n            justifyContent: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(CardMedia, {\n                className: classes.media,\n                image: weather.current.condition.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.degrees,\n                children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.subTitle,\n                children: [\"Wind: \", weather.current.wind_mph, \" kph \", \"\", \"Pressure: \", weather.current.pressure_mb, \" mb\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.text,\n              children: weather.current.condition.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Today, \"ZbT4MiFVyUSHslMEzqlXPVfjPr0=\", false, function () {\n  return [useStyles];\n});\n\n_c = Today;\nexport default Today;\n\nvar _c;\n\n$RefreshReg$(_c, \"Today\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Today/Today.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","useStyles","Geocode","Grid","Today","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","weather","setWeather","latitude","setLatitude","longitude","setLongitude","location","setLocation","isToday","setIsToday","navigator","geolocation","getCurrentPosition","position","coords","fromLatLng","then","response","address","results","formatted_address","error","console","getToday","get","REACT_APP_WEATHER_API","data","catch","log","current","is_day","day","root","title","name","country","media","condition","icon","degrees","temp_c","DEGREES","subTitle","wind_mph","pressure_mb","text"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Today = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [location, setLocation] = useState(\"belfast\");\n  const [isToday, setIsToday] = useState(true);\n\n  // Geolocation\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n    Geocode.fromLatLng(latitude, longitude).then(\n      (response) => {\n        const address = response.results[0].formatted_address;\n        setLocation(address);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  });\n  useEffect(() => {\n    const getToday = () => {\n      axios\n        .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n        .then((data) => {\n          setWeather(data.data);\n          setIsToday(true);\n        })\n        .catch((error) => console.log(error));\n    };\n    getToday();\n  }, [location]);\n\n  return (\n    <Grid container spacing={2} justify=\"center\">\n      {weather && isToday === true && (\n        <>\n          <Grid item xs={12}>\n            <Typography variant=\"h2\">Today</Typography>\n          </Grid>\n          <Card\n            className={\n              weather.current.is_day === 1 ? classes.day : classes.root\n            }\n          >\n            <CardContent>\n              <Grid item xs={12}>\n                <Typography gutterBottom variant=\"h4\" className={classes.title}>\n                  {weather.location.name} {\"\"} {weather.location.country}\n                </Typography>\n              </Grid>\n              <Grid\n                container\n                spacing={2}\n                justify=\"space-between\"\n                justifyContent=\"center\"\n              >\n                <Grid item xs={4}>\n                  <CardMedia\n                    className={classes.media}\n                    image={weather.current.condition.icon}\n                  />\n                </Grid>\n                <Grid item xs={4}>\n                  <Typography className={classes.degrees}>\n                    {weather.current.temp_c} {SYMBOLS.DEGREES}\n                  </Typography>\n                </Grid>\n                <Grid item xs={4}>\n                  <Typography className={classes.subTitle}>\n                    Wind: {weather.current.wind_mph} kph {\"\"}\n                    Pressure: {weather.current.pressure_mb} mb\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography className={classes.text}>\n                  {weather.current.condition.text}\n                </Typography>\n              </Grid>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </Grid>\n  );\n};\n\nexport default Today;\n"]},"metadata":{},"sourceType":"module"}