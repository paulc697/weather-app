{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Symbols\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Weather = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null); // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n  // const [location, setLocation] = useState(\"\");\n\n  const [days] = useState(7);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({}); // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    getToday();\n  }, []);\n\n  const getToday = () => {\n    setIsForecast(false);\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=Belfast`).then(data => {\n      setWeather(data.data);\n      console.log(data.data);\n      setIsToday(true);\n    }).catch(error => console.log(error));\n  }; //Search event\n\n\n  const weatherInput = e => {\n    setInput(e.target.value);\n  };\n\n  const getForecast = () => {\n    setIsToday(false);\n    setIsForecast(true);\n    axios.get(`${process.env.REACT_APP_FORECAST_API}=Belfast&days=${days}`).then(data => {\n      setForecast(data.data);\n      console.log(data.data);\n    }).catch(error => console.log(error));\n  };\n\n  const searchWeather = () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${input}`).then(data => {\n      setWeather(data.data);\n    });\n  };\n\n  const forecastbyDay = () => {\n    forecast.forecast.map(forecastday => {\n      return forecastday;\n    });\n    setDailyForecast(forecastbyDay);\n  };\n\n  console.log(dailyForecast);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: \"2\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      className: classes.row,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: \"Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: weatherInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: searchWeather,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getToday,\n      children: \"Today\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getForecast,\n      children: \"Next 3 Days\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getToday,\n      children: \"History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), weather && isToday === true && /*#__PURE__*/_jsxDEV(Grid, {\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"h4\",\n            className: classes.text,\n            children: weather.location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            className: classes.text,\n            children: weather.location.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", weather.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: weather.current.condition.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n          className: classes.media,\n          image: weather.current.condition.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), forecast && isForecast === true && /*#__PURE__*/_jsxDEV(Grid, {\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: [\"Next 3 Days for \", forecast.location.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: [forecast.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", forecast.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: forecast.current.condition.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n          className: classes.media,\n          image: forecast.current.condition.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Weather, \"Yjv2ArqxFEO+61hrMulPyn5jfjo=\", false, function () {\n  return [useStyles];\n});\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","useStyles","Geocode","Grid","Weather","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","input","setInput","weather","setWeather","forecast","setForecast","days","isToday","setIsToday","isForecast","setIsForecast","dailyForecast","setDailyForecast","getToday","get","REACT_APP_WEATHER_API","then","data","console","log","catch","error","weatherInput","e","target","value","getForecast","REACT_APP_FORECAST_API","searchWeather","forecastbyDay","map","forecastday","row","root","text","location","name","country","current","temp_c","DEGREES","temp_f","FAHRENHEIT","condition","media","icon"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Symbols\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Weather = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n  // const [location, setLocation] = useState(\"\");\n  const [days] = useState(7);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    getToday();\n  }, []);\n\n  const getToday = () => {\n    setIsForecast(false);\n    axios\n      .get(`${process.env.REACT_APP_WEATHER_API}=Belfast`)\n      .then((data) => {\n        setWeather(data.data);\n        console.log(data.data);\n        setIsToday(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  //Search event\n  const weatherInput = (e) => {\n    setInput(e.target.value);\n  };\n\n  const getForecast = () => {\n    setIsToday(false);\n    setIsForecast(true);\n    axios\n      .get(`${process.env.REACT_APP_FORECAST_API}=Belfast&days=${days}`)\n      .then((data) => {\n        setForecast(data.data);\n        console.log(data.data);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const searchWeather = () => {\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${input}`).then((data) => {\n      setWeather(data.data);\n    });\n  };\n\n  const forecastbyDay = () => {\n    forecast.forecast.map((forecastday) => {\n      return forecastday;\n    });\n    setDailyForecast(forecastbyDay);\n  };\n\n  console.log(dailyForecast);\n\n  return (\n    <Grid container spacing=\"2\">\n      <Grid item xs={6} className={classes.row}>\n        <Typography variant=\"h2\">Weather</Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <input onChange={weatherInput} type=\"text\" />\n        <button onClick={searchWeather}>Search</button>\n      </Grid>\n      <button onClick={getToday}>Today</button>\n      <button onClick={getForecast}>Next 3 Days</button>\n      <button onClick={getToday}>History</button>\n      {weather && isToday === true && (\n        <Grid xs={12}>\n          <Typography variant=\"h2\">Today</Typography>\n          <Card className={classes.root}>\n            <CardContent>\n              <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                {weather.location.name}\n              </Typography>\n              <Typography variant=\"h5\" className={classes.text}>\n                {weather.location.country}\n              </Typography>\n              <Typography className={classes.text}>\n                {weather.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                {weather.current.temp_f} {SYMBOLS.FAHRENHEIT}\n              </Typography>\n              <Typography className={classes.text}>\n                {weather.current.condition.text}\n              </Typography>\n            </CardContent>\n            <CardMedia\n              className={classes.media}\n              image={weather.current.condition.icon}\n            />\n          </Card>\n        </Grid>\n      )}\n      {forecast && isForecast === true && (\n        <Grid xs={12}>\n          <Typography variant=\"h2\">\n            Next 3 Days for {forecast.location.name}\n          </Typography>\n          <Card className={classes.root}>\n            <CardContent>\n              <Typography className={classes.text}>\n                {forecast.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                {forecast.current.temp_f} {SYMBOLS.FAHRENHEIT}\n              </Typography>\n              <Typography className={classes.text}>\n                {forecast.current.condition.text}\n              </Typography>\n            </CardContent>\n            <CardMedia\n              className={classes.media}\n              image={forecast.current.condition.icon}\n            />\n          </Card>\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}