{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/History/History.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, VALID_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst History = (callback, deps) => {\n  _s();\n\n  const classes = useStyles();\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [location, setLocation] = useState(\"belfast\");\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(format(new Date(selectedDate), VALID_DATE_FORMAT));\n  const getHistory = useCallback(async () => {\n    const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n    setDate(newDate);\n    axios.get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${date}`).then(data => {\n      setHistory(data.data.forecast);\n      setHistoryForecast(data.data.forecast);\n      console.log(data.data.forecast);\n      setIsHistory(true);\n    }).catch(error => console.log(error));\n  }, [location, selectedDate, date]);\n  useEffect(() => {\n    getHistory();\n  }, [getHistory]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: \"2\",\n    children: history && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: isHistory === true ? historyForecast.forecastday.map((forecastday, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h2\",\n            children: history.location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n                label: \"Select Date\",\n                clearable: true,\n                maxDate: new Date(),\n                format: \"yyyy/MM/dd\",\n                value: selectedDate,\n                onChange: date => handleDateChange(date)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }, this), format(new Date(forecastday.date), VALID_DATE_FORMAT), /*#__PURE__*/_jsxDEV(Card, {\n              className: classes.root,\n              children: [/*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.text,\n                  children: [forecastday.day.avgtemp_c, SYMBOLS.DEGREES, \" \", \"\", forecastday.day.avgtemp_f, SYMBOLS.FAHRENHEIT]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.text,\n                  children: [\"Sunrise: \", forecastday.astro.sunrise]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.text,\n                  children: [\"Sunset: \", forecastday.astro.sunset]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.text,\n                  children: forecastday.day.condition.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n                className: classes.media,\n                image: forecastday.day.condition.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No forecast found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(History, \"RpNLl1JEnGRLAwxursAr1bT32Lg=\", false, function () {\n  return [useStyles];\n});\n\n_c = History;\nexport default History;\n\nvar _c;\n\n$RefreshReg$(_c, \"History\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/History/History.js"],"names":["React","useCallback","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","VALID_DATE_FORMAT","useStyles","Grid","format","KeyboardDatePicker","History","callback","deps","classes","selectedDate","handleDateChange","Date","location","setLocation","isHistory","setIsHistory","history","setHistory","historyForecast","setHistoryForecast","date","setDate","getHistory","newDate","toISOString","split","get","process","env","REACT_APP_HISTORY_API","then","data","forecast","console","log","catch","error","forecastday","map","index","name","root","text","day","avgtemp_c","DEGREES","avgtemp_f","FAHRENHEIT","astro","sunrise","sunset","condition","media","icon"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, VALID_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst History = (callback, deps) => {\n  const classes = useStyles();\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [location, setLocation] = useState(\"belfast\");\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(\n    format(new Date(selectedDate), VALID_DATE_FORMAT)\n  );\n\n  const getHistory = useCallback(async () => {\n    const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n    setDate(newDate);\n    axios\n      .get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${date}`)\n      .then((data) => {\n        setHistory(data.data.forecast);\n        setHistoryForecast(data.data.forecast);\n        console.log(data.data.forecast);\n        setIsHistory(true);\n      })\n      .catch((error) => console.log(error));\n  }, [location, selectedDate, date]);\n\n  useEffect(() => {\n    getHistory();\n  }, [getHistory]);\n\n  return (\n    <Grid container spacing=\"2\">\n      {history && (\n        <Grid container spacing=\"2\">\n          {isHistory === true ? (\n            historyForecast.forecastday.map((forecastday, index) => {\n              return (\n                <>\n                  <Typography variant=\"h2\">{history.location.name}</Typography>\n                  <Grid item xs={12}>\n                    <Grid item xs={12}>\n                      <KeyboardDatePicker\n                        label=\"Select Date\"\n                        clearable\n                        maxDate={new Date()}\n                        format=\"yyyy/MM/dd\"\n                        value={selectedDate}\n                        onChange={(date) => handleDateChange(date)}\n                      />\n                    </Grid>\n                    {format(new Date(forecastday.date), VALID_DATE_FORMAT)}\n                    <Card className={classes.root}>\n                      <CardContent>\n                        <Typography className={classes.text}>\n                          {forecastday.day.avgtemp_c}\n                          {SYMBOLS.DEGREES} {\"\"}\n                          {forecastday.day.avgtemp_f}\n                          {SYMBOLS.FAHRENHEIT}\n                        </Typography>\n                        <Typography className={classes.text}>\n                          Sunrise: {forecastday.astro.sunrise}\n                        </Typography>\n                        <Typography className={classes.text}>\n                          Sunset: {forecastday.astro.sunset}\n                        </Typography>\n\n                        <Typography className={classes.text}>\n                          {forecastday.day.condition.text}\n                        </Typography>\n                      </CardContent>\n                      <CardMedia\n                        className={classes.media}\n                        image={forecastday.day.condition.icon}\n                      />\n                    </Card>\n                  </Grid>\n                </>\n              );\n            })\n          ) : (\n            <Typography>No forecast found</Typography>\n          )}\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default History;\n"]},"metadata":{},"sourceType":"module"}