{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT, VALID_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { Link } from \"react-router-dom\";\nimport HourlyWeather from \"../HourlyWeather/HourlyWeather\";\n\nconst Weather = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [forecast, setForecast] = useState(null);\n  const [selectedDate, handleDateChange] = useState(new Date()); // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(format(new Date(selectedDate), VALID_DATE_FORMAT)); //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    getToday(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getToday = () => {\n    setIsForecast(false);\n    setIsHistory(false);\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n      setWeather(data.data);\n      setIsToday(true);\n    }).catch(error => console.log(error));\n  }; //Search event\n\n\n  const weatherInput = e => {\n    setInput(e.target.value);\n  };\n\n  const searchWeather = () => {\n    if (isToday === true) {\n      axios.get(`${process.env.REACT_APP_WEATHER_API}=${input}`).then(data => {\n        console.log(data.data);\n        setWeather(data.data);\n      });\n    }\n\n    if (isForecast === true) {\n      axios.get(`${process.env.REACT_APP_FORECAST_API}=${input}`).then(data => {\n        console.log(data.data.location.name);\n        setForecast(data.data);\n        setLocation(data.data.location.name);\n        getForecast();\n      });\n    }\n  };\n\n  const getForecast = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n      setForecast(data.data);\n      setDailyForecast(data.data.forecast);\n      setIsForecast(true);\n    }).catch(error => console.log(error));\n  };\n\n  const getHistory = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n    setDate(newDate);\n    axios.get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${date}`).then(data => {\n      setHistory(data.data);\n      setHistoryForecast(data.data.forecast);\n      setIsHistory(true);\n    }).catch(error => console.log(error));\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        className: classes.row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: weatherInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: searchWeather,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        indicatorColor: \"primary\",\n        textColor: \"primary\",\n        onChange: handleTabChange,\n        \"aria-label\": \"Weather Tab\",\n        variant: \"scrollable\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Today\",\n          value: 0,\n          id: \"Tab0\",\n          onClick: getToday\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Next 3 Days\",\n          value: 1,\n          id: \"Tab1\",\n          onClick: getForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"History\",\n          value: 2,\n          id: \"Tab2\",\n          onClick: getHistory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), weather && isToday === true && /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Today\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: classes.root,\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h4\",\n              className: classes.text,\n              children: weather.location.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              className: classes.text,\n              children: weather.location.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.text,\n              children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", weather.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.text,\n              children: weather.current.condition.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n            className: classes.media,\n            image: weather.current.condition.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), forecast && isForecast === true ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: [\"Next 3 Days for \", forecast.location.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), dailyForecast.forecastday.length > 0 ? dailyForecast.forecastday.map(forecastday => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          xs: 12,\n          children: [format(new Date(forecastday.date), SHORT_DATE_FORMAT), /*#__PURE__*/_jsxDEV(Link, {\n            to: `/${date}`,\n            underline: \"none\",\n            component: HourlyWeather,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              className: classes.root,\n              children: [/*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.text,\n                  children: [forecastday.day.avgtemp_c, SYMBOLS.DEGREES, \" \", \"\", forecastday.day.avgtemp_f, SYMBOLS.FAHRENHEIT]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.text,\n                  children: [\"Sunrise: \", forecastday.astro.sunrise]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.text,\n                  children: [\"Sunset: \", forecastday.astro.sunset]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.text,\n                  children: forecastday.day.condition.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n                className: classes.media,\n                image: forecastday.day.condition.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No forecast found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this) : history && isHistory === true && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: history.location.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }, this), historyForecast.forecastday.length > 0 ? historyForecast.forecastday.map(forecastday => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n              label: \"Select Date\",\n              clearable: true,\n              maxDate: new Date(),\n              format: \"yyyy/MM/dd\",\n              value: selectedDate,\n              onChange: date => handleDateChange(date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 21\n          }, this), format(new Date(forecastday.date), VALID_DATE_FORMAT), /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.root,\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [forecastday.day.avgtemp_c, SYMBOLS.DEGREES, \" \", \"\", forecastday.day.avgtemp_f, SYMBOLS.FAHRENHEIT]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunrise: \", forecastday.astro.sunrise]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunset: \", forecastday.astro.sunset]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: forecastday.day.condition.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n              className: classes.media,\n              image: forecastday.day.condition.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 19\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No forecast found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Weather, \"u5lxkX6zYVXIRlih8btD4tpzZxk=\", false, function () {\n  return [useStyles];\n});\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","SHORT_DATE_FORMAT","VALID_DATE_FORMAT","useStyles","Geocode","Grid","format","Tab","Tabs","KeyboardDatePicker","Link","HourlyWeather","Weather","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","input","setInput","weather","setWeather","activeTab","setActiveTab","forecast","setForecast","selectedDate","handleDateChange","Date","location","setLocation","days","isToday","setIsToday","isForecast","setIsForecast","dailyForecast","setDailyForecast","isHistory","setIsHistory","history","setHistory","historyForecast","setHistoryForecast","date","setDate","getToday","get","REACT_APP_WEATHER_API","then","data","catch","error","console","log","weatherInput","e","target","value","searchWeather","REACT_APP_FORECAST_API","name","getForecast","getHistory","newDate","toISOString","split","REACT_APP_HISTORY_API","handleTabChange","event","newValue","row","root","text","country","current","temp_c","DEGREES","temp_f","FAHRENHEIT","condition","media","icon","forecastday","length","map","day","avgtemp_c","avgtemp_f","astro","sunrise","sunset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  SYMBOLS,\n  SHORT_DATE_FORMAT,\n  VALID_DATE_FORMAT,\n} from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { Link } from \"react-router-dom\";\nimport HourlyWeather from \"../HourlyWeather/HourlyWeather\";\n\nconst Weather = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [forecast, setForecast] = useState(null);\n  const [selectedDate, handleDateChange] = useState(new Date());\n  // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  const [date, setDate] = useState(\n    format(new Date(selectedDate), VALID_DATE_FORMAT)\n  );\n\n  //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    getToday();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getToday = () => {\n    setIsForecast(false);\n    setIsHistory(false);\n    axios\n      .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n      .then((data) => {\n        setWeather(data.data);\n        setIsToday(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  //Search event\n  const weatherInput = (e) => {\n    setInput(e.target.value);\n  };\n\n  const searchWeather = () => {\n    if (isToday === true) {\n      axios\n        .get(`${process.env.REACT_APP_WEATHER_API}=${input}`)\n        .then((data) => {\n          console.log(data.data);\n          setWeather(data.data);\n        });\n    }\n    if (isForecast === true) {\n      axios\n        .get(`${process.env.REACT_APP_FORECAST_API}=${input}`)\n        .then((data) => {\n          console.log(data.data.location.name);\n          setForecast(data.data);\n          setLocation(data.data.location.name);\n          getForecast();\n        });\n    }\n  };\n\n  const getForecast = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    axios\n      .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n      .then((data) => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        setIsForecast(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getHistory = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n    setDate(newDate);\n    axios\n      .get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${date}`)\n      .then((data) => {\n        setHistory(data.data);\n        setHistoryForecast(data.data.forecast);\n        setIsHistory(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <>\n      <Grid container spacing=\"2\">\n        <Grid item xs={6} className={classes.row}></Grid>\n        <Grid item xs={6}>\n          <input onChange={weatherInput} type=\"text\" />\n          <button onClick={searchWeather}>Search</button>\n        </Grid>\n        <Tabs\n          value={activeTab}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          onChange={handleTabChange}\n          aria-label=\"Weather Tab\"\n          variant=\"scrollable\"\n        >\n          <Tab label={\"Today\"} value={0} id=\"Tab0\" onClick={getToday} />\n          <Tab\n            label={\"Next 3 Days\"}\n            value={1}\n            id=\"Tab1\"\n            onClick={getForecast}\n          />\n          <Tab label={\"History\"} value={2} id=\"Tab2\" onClick={getHistory} />\n        </Tabs>\n\n        {/* <button onClick={getToday}>Today</button>\n        <button onClick={getForecast}>Next 3 Days</button>\n        <button onClick={getHistory}>History</button> */}\n        {weather && isToday === true && (\n          <Grid xs={12}>\n            <Typography variant=\"h2\">Today</Typography>\n            <Card className={classes.root}>\n              <CardContent>\n                <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                  {weather.location.name}\n                </Typography>\n                <Typography variant=\"h5\" className={classes.text}>\n                  {weather.location.country}\n                </Typography>\n                <Typography className={classes.text}>\n                  {weather.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                  {weather.current.temp_f} {SYMBOLS.FAHRENHEIT}\n                </Typography>\n                <Typography className={classes.text}>\n                  {weather.current.condition.text}\n                </Typography>\n              </CardContent>\n              <CardMedia\n                className={classes.media}\n                image={weather.current.condition.icon}\n              />\n            </Card>\n          </Grid>\n        )}\n      </Grid>\n      {forecast && isForecast === true ? (\n        <Grid container spacing=\"2\">\n          <Typography variant=\"h2\">\n            Next 3 Days for {forecast.location.name}\n          </Typography>\n          {dailyForecast.forecastday.length > 0 ? (\n            dailyForecast.forecastday.map((forecastday) => {\n              return (\n                <Grid xs={12}>\n                  {format(new Date(forecastday.date), SHORT_DATE_FORMAT)}\n                  <Link\n                    to={`/${date}`}\n                    underline=\"none\"\n                    component={HourlyWeather}\n                  >\n                    <Card className={classes.root}>\n                      <CardContent>\n                        <Typography className={classes.text}>\n                          {forecastday.day.avgtemp_c}\n                          {SYMBOLS.DEGREES} {\"\"}\n                          {forecastday.day.avgtemp_f}\n                          {SYMBOLS.FAHRENHEIT}\n                        </Typography>\n                        <Typography className={classes.text}>\n                          Sunrise: {forecastday.astro.sunrise}\n                        </Typography>\n                        <Typography className={classes.text}>\n                          Sunset: {forecastday.astro.sunset}\n                        </Typography>\n\n                        <Typography className={classes.text}>\n                          {forecastday.day.condition.text}\n                        </Typography>\n                      </CardContent>\n                      <CardMedia\n                        className={classes.media}\n                        image={forecastday.day.condition.icon}\n                      />\n                    </Card>\n                  </Link>\n                </Grid>\n              );\n            })\n          ) : (\n            <Typography>No forecast found</Typography>\n          )}\n        </Grid>\n      ) : (\n        history &&\n        isHistory === true && (\n          <Grid container spacing=\"2\">\n            <Typography variant=\"h2\">{history.location.name}</Typography>\n            {historyForecast.forecastday.length > 0 ? (\n              historyForecast.forecastday.map((forecastday) => {\n                return (\n                  <Grid xs={12}>\n                    <Grid xs={12}>\n                      <KeyboardDatePicker\n                        label=\"Select Date\"\n                        clearable\n                        maxDate={new Date()}\n                        format=\"yyyy/MM/dd\"\n                        value={selectedDate}\n                        onChange={(date) => handleDateChange(date)}\n                      />\n                    </Grid>\n                    {format(new Date(forecastday.date), VALID_DATE_FORMAT)}\n                    <Card className={classes.root}>\n                      <CardContent>\n                        <Typography className={classes.text}>\n                          {forecastday.day.avgtemp_c}\n                          {SYMBOLS.DEGREES} {\"\"}\n                          {forecastday.day.avgtemp_f}\n                          {SYMBOLS.FAHRENHEIT}\n                        </Typography>\n                        <Typography className={classes.text}>\n                          Sunrise: {forecastday.astro.sunrise}\n                        </Typography>\n                        <Typography className={classes.text}>\n                          Sunset: {forecastday.astro.sunset}\n                        </Typography>\n\n                        <Typography className={classes.text}>\n                          {forecastday.day.condition.text}\n                        </Typography>\n                      </CardContent>\n                      <CardMedia\n                        className={classes.media}\n                        image={forecastday.day.condition.icon}\n                      />\n                    </Card>\n                  </Grid>\n                );\n              })\n            ) : (\n              <Typography>No forecast found</Typography>\n            )}\n          </Grid>\n        )\n      )}\n    </>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}