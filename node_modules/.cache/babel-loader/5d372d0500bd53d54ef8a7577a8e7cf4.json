{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport addDays from \"date-fns/addDays\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\n\nconst Weather = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null); // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({}); //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    getToday();\n  }, []);\n\n  const getToday = () => {\n    setIsForecast(false);\n    setIsHistory(false);\n    axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n      setWeather(data.data);\n      setIsToday(true);\n    }).catch(error => console.log(error));\n  }; //Search event\n\n\n  const weatherInput = e => {\n    setInput(e.target.value);\n  };\n\n  const searchWeather = () => {\n    if (isToday === true) {\n      axios.get(`${process.env.REACT_APP_WEATHER_API}=${input}`).then(data => {\n        console.log(data.data);\n        setWeather(data.data);\n      });\n    }\n\n    if (isForecast === true) {\n      axios.get(`${process.env.REACT_APP_FORECAST_API}=${input}`).then(data => {\n        console.log(data.data.location.name);\n        setForecast(data.data);\n        setLocation(data.data.location.name);\n        getForecast();\n      });\n    }\n  };\n\n  const getForecast = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n      setForecast(data.data);\n      setDailyForecast(data.data.forecast);\n      setIsForecast(true);\n    }).catch(error => console.log(error));\n  };\n\n  const getHistory = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    const newDate = new Date();\n    const minusSeven = addDays(new Date(newDate), -7).toISOString().split(\"T\")[0];\n    axios.get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${minusSeven}`).then(data => {\n      setHistory(data.data);\n      setHistoryForecast(data.data.forecast);\n      setIsHistory(true);\n    }).catch(error => console.log(error));\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        className: classes.row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: weatherInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: searchWeather,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        indicatorColor: \"primary\",\n        textColor: \"secondary\",\n        onChange: handleTabChange,\n        \"aria-label\": \"Family tab\",\n        variant: \"scrollable\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: t(\"detailsPage.tabs.memberOptions\"),\n          value: 0,\n          href: \"#MemberOptions\",\n          id: \"Tab0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), admin_of.includes(clubId) && /*#__PURE__*/_jsxDEV(Tab, {\n          label: t(\"detailsPage.tabs.members\"),\n          value: 1,\n          id: \"Tab1\",\n          href: \"#Members\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getToday,\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getForecast,\n        children: \"Next 3 Days\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getHistory,\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), weather && isToday === true && /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Today\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: classes.root,\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h4\",\n              className: classes.text,\n              children: weather.location.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              className: classes.text,\n              children: weather.location.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.text,\n              children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", weather.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.text,\n              children: weather.current.condition.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n            className: classes.media,\n            image: weather.current.condition.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), forecast && isForecast === true ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: [\"Next 3 Days for \", forecast.location.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), dailyForecast.forecastday.length > 0 ? dailyForecast.forecastday.map(forecastday => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          xs: 12,\n          children: [format(new Date(forecastday.date), SHORT_DATE_FORMAT), /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.root,\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [forecastday.day.avgtemp_c, SYMBOLS.DEGREES, \" \", \"\", forecastday.day.avgtemp_f, SYMBOLS.FAHRENHEIT]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunrise: \", forecastday.astro.sunrise]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunset: \", forecastday.astro.sunset]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: forecastday.day.condition.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n              className: classes.media,\n              image: forecastday.day.condition.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No forecast found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this) : history && isHistory === true && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: history.location.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this), historyForecast.forecastday.length > 0 ? historyForecast.forecastday.map(forecastday => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          xs: 12,\n          children: [format(new Date(forecastday.date), SHORT_DATE_FORMAT), /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.root,\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [forecastday.day.avgtemp_c, SYMBOLS.DEGREES, \" \", \"\", forecastday.day.avgtemp_f, SYMBOLS.FAHRENHEIT]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunrise: \", forecastday.astro.sunrise]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [\"Sunset: \", forecastday.astro.sunset]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: forecastday.day.condition.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n              className: classes.media,\n              image: forecastday.day.condition.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 19\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No forecast found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Weather, \"kOyUzWFT2i3oISDKFQNTy/eIIIE=\", false, function () {\n  return [useStyles];\n});\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Components/Weather/Weather.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","SHORT_DATE_FORMAT","useStyles","Geocode","Grid","format","addDays","Tab","Tabs","Weather","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","input","setInput","weather","setWeather","forecast","setForecast","location","setLocation","days","isToday","setIsToday","isForecast","setIsForecast","dailyForecast","setDailyForecast","isHistory","setIsHistory","history","setHistory","historyForecast","setHistoryForecast","getToday","get","REACT_APP_WEATHER_API","then","data","catch","error","console","log","weatherInput","e","target","value","searchWeather","REACT_APP_FORECAST_API","name","getForecast","getHistory","newDate","Date","minusSeven","toISOString","split","REACT_APP_HISTORY_API","handleTabChange","event","newValue","setActiveTab","row","activeTab","t","admin_of","includes","clubId","root","text","country","current","temp_c","DEGREES","temp_f","FAHRENHEIT","condition","media","icon","forecastday","length","map","date","day","avgtemp_c","avgtemp_f","astro","sunrise","sunset"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,OAAT,EAAkBC,iBAAlB,QAA2C,2BAA3C;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpBN,EAAAA,OAAO,CAACO,SAAR,CAAmB,GAAEC,OAAO,CAACC,GAAR,CAAYC,yBAA0B,EAA3D;AACA,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACyB,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAC,IAAD,CAAxC,CALoB,CAMpB;AACA;;AACA,QAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,SAAD,CAAxC;AACA,QAAM,CAAC6B,IAAD,IAAS7B,QAAQ,CAAC,CAAD,CAAvB;AACA,QAAM,CAAC8B,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACgC,UAAD,EAAaC,aAAb,IAA8BjC,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACkC,aAAD,EAAgBC,gBAAhB,IAAoCnC,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACoC,SAAD,EAAYC,YAAZ,IAA4BrC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACsC,OAAD,EAAUC,UAAV,IAAwBvC,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACwC,eAAD,EAAkBC,kBAAlB,IAAwCzC,QAAQ,CAAC,EAAD,CAAtD,CAfoB,CAiBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd2C,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,QAAQ,GAAG,MAAM;AACrBT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACApC,IAAAA,KAAK,CACF0C,GADH,CACQ,GAAE1B,OAAO,CAACC,GAAR,CAAY0B,qBAAsB,IAAGjB,QAAS,EADxD,EAEGkB,IAFH,CAESC,IAAD,IAAU;AACdtB,MAAAA,UAAU,CAACsB,IAAI,CAACA,IAAN,CAAV;AACAf,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KALH,EAMGgB,KANH,CAMUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANpB;AAOD,GAVD,CAtCoB,CAkDpB;;;AACA,QAAMG,YAAY,GAAIC,CAAD,IAAO;AAC1B9B,IAAAA,QAAQ,CAAC8B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAIzB,OAAO,KAAK,IAAhB,EAAsB;AACpB7B,MAAAA,KAAK,CACF0C,GADH,CACQ,GAAE1B,OAAO,CAACC,GAAR,CAAY0B,qBAAsB,IAAGvB,KAAM,EADrD,EAEGwB,IAFH,CAESC,IAAD,IAAU;AACdG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACA,IAAjB;AACAtB,QAAAA,UAAU,CAACsB,IAAI,CAACA,IAAN,CAAV;AACD,OALH;AAMD;;AACD,QAAId,UAAU,KAAK,IAAnB,EAAyB;AACvB/B,MAAAA,KAAK,CACF0C,GADH,CACQ,GAAE1B,OAAO,CAACC,GAAR,CAAYsC,sBAAuB,IAAGnC,KAAM,EADtD,EAEGwB,IAFH,CAESC,IAAD,IAAU;AACdG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACA,IAAL,CAAUnB,QAAV,CAAmB8B,IAA/B;AACA/B,QAAAA,WAAW,CAACoB,IAAI,CAACA,IAAN,CAAX;AACAlB,QAAAA,WAAW,CAACkB,IAAI,CAACA,IAAL,CAAUnB,QAAV,CAAmB8B,IAApB,CAAX;AACAC,QAAAA,WAAW;AACZ,OAPH;AAQD;AACF,GAnBD;;AAqBA,QAAMA,WAAW,GAAG,MAAM;AACxB3B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAhC,IAAAA,KAAK,CACF0C,GADH,CACQ,GAAE1B,OAAO,CAACC,GAAR,CAAYsC,sBAAuB,IAAG7B,QAAS,SAAQE,IAAK,EADtE,EAEGgB,IAFH,CAESC,IAAD,IAAU;AACdpB,MAAAA,WAAW,CAACoB,IAAI,CAACA,IAAN,CAAX;AACAX,MAAAA,gBAAgB,CAACW,IAAI,CAACA,IAAL,CAAUrB,QAAX,CAAhB;AACAQ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KANH,EAOGc,KAPH,CAOUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAPpB;AAQD,GAXD;;AAaA,QAAMW,UAAU,GAAG,MAAM;AACvB5B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,aAAa,CAAC,KAAD,CAAb;AACA,UAAM2B,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,UAAMC,UAAU,GAAGlD,OAAO,CAAC,IAAIiD,IAAJ,CAASD,OAAT,CAAD,EAAoB,CAAC,CAArB,CAAP,CAChBG,WADgB,GAEhBC,KAFgB,CAEV,GAFU,EAEL,CAFK,CAAnB;AAGA/D,IAAAA,KAAK,CACF0C,GADH,CACQ,GAAE1B,OAAO,CAACC,GAAR,CAAY+C,qBAAsB,IAAGtC,QAAS,OAAMmC,UAAW,EADzE,EAEGjB,IAFH,CAESC,IAAD,IAAU;AACdP,MAAAA,UAAU,CAACO,IAAI,CAACA,IAAN,CAAV;AAEAL,MAAAA,kBAAkB,CAACK,IAAI,CAACA,IAAL,CAAUrB,QAAX,CAAlB;AACAY,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAPH,EAQGU,KARH,CAQUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CARpB;AASD,GAhBD;;AAkBA,QAAMkB,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3CC,IAAAA,YAAY,CAACD,QAAD,CAAZ;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,GAAxB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAkB,QAAA,SAAS,EAAEhD,OAAO,CAACkD;AAArC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,gCACE;AAAO,UAAA,QAAQ,EAAEnB,YAAjB;AAA+B,UAAA,IAAI,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAEI,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAME,QAAC,IAAD;AACE,QAAA,KAAK,EAAEgB,SADT;AAEE,QAAA,cAAc,EAAC,SAFjB;AAGE,QAAA,SAAS,EAAC,WAHZ;AAIE,QAAA,QAAQ,EAAEL,eAJZ;AAKE,sBAAW,YALb;AAME,QAAA,OAAO,EAAC,YANV;AAAA,gCAQE,QAAC,GAAD;AACE,UAAA,KAAK,EAAEM,CAAC,CAAC,gCAAD,CADV;AAEE,UAAA,KAAK,EAAE,CAFT;AAGE,UAAA,IAAI,EAAC,gBAHP;AAIE,UAAA,EAAE,EAAC;AAJL;AAAA;AAAA;AAAA;AAAA,gBARF,EAcGC,QAAQ,CAACC,QAAT,CAAkBC,MAAlB,kBACC,QAAC,GAAD;AACE,UAAA,KAAK,EAAEH,CAAC,CAAC,0BAAD,CADV;AAEE,UAAA,KAAK,EAAE,CAFT;AAGE,UAAA,EAAE,EAAC,MAHL;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eA8BE;AAAQ,QAAA,OAAO,EAAE9B,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BF,eA+BE;AAAQ,QAAA,OAAO,EAAEgB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BF,eAgCE;AAAQ,QAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCF,EAiCGpC,OAAO,IAAIO,OAAO,KAAK,IAAvB,iBACC,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE,EAAV;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAEV,OAAO,CAACwD,IAAzB;AAAA,kCACE,QAAC,WAAD;AAAA,oCACE,QAAC,UAAD;AAAY,cAAA,YAAY,MAAxB;AAAyB,cAAA,OAAO,EAAC,IAAjC;AAAsC,cAAA,SAAS,EAAExD,OAAO,CAACyD,IAAzD;AAAA,wBACGtD,OAAO,CAACI,QAAR,CAAiB8B;AADpB;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,IAApB;AAAyB,cAAA,SAAS,EAAErC,OAAO,CAACyD,IAA5C;AAAA,wBACGtD,OAAO,CAACI,QAAR,CAAiBmD;AADpB;AAAA;AAAA;AAAA;AAAA,oBAJF,eAOE,QAAC,UAAD;AAAY,cAAA,SAAS,EAAE1D,OAAO,CAACyD,IAA/B;AAAA,yBACGtD,OAAO,CAACwD,OAAR,CAAgBC,MADnB,OAC4B1E,OAAO,CAAC2E,OADpC,OAC8C,EAD9C,EAEG1D,OAAO,CAACwD,OAAR,CAAgBG,MAFnB,OAE4B5E,OAAO,CAAC6E,UAFpC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAWE,QAAC,UAAD;AAAY,cAAA,SAAS,EAAE/D,OAAO,CAACyD,IAA/B;AAAA,wBACGtD,OAAO,CAACwD,OAAR,CAAgBK,SAAhB,CAA0BP;AAD7B;AAAA;AAAA;AAAA;AAAA,oBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAgBE,QAAC,SAAD;AACE,YAAA,SAAS,EAAEzD,OAAO,CAACiE,KADrB;AAEE,YAAA,KAAK,EAAE9D,OAAO,CAACwD,OAAR,CAAgBK,SAAhB,CAA0BE;AAFnC;AAAA;AAAA;AAAA;AAAA,kBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EA6DG7D,QAAQ,IAAIO,UAAU,KAAK,IAA3B,gBACC,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,GAAxB;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA,uCACmBP,QAAQ,CAACE,QAAT,CAAkB8B,IADrC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIGvB,aAAa,CAACqD,WAAd,CAA0BC,MAA1B,GAAmC,CAAnC,GACCtD,aAAa,CAACqD,WAAd,CAA0BE,GAA1B,CAA+BF,WAAD,IAAiB;AAC7C,4BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAE,EAAV;AAAA,qBACG5E,MAAM,CAAC,IAAIkD,IAAJ,CAAS0B,WAAW,CAACG,IAArB,CAAD,EAA6BnF,iBAA7B,CADT,eAEE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAEa,OAAO,CAACwD,IAAzB;AAAA,oCACE,QAAC,WAAD;AAAA,sCACE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAExD,OAAO,CAACyD,IAA/B;AAAA,2BACGU,WAAW,CAACI,GAAZ,CAAgBC,SADnB,EAEGtF,OAAO,CAAC2E,OAFX,OAEqB,EAFrB,EAGGM,WAAW,CAACI,GAAZ,CAAgBE,SAHnB,EAIGvF,OAAO,CAAC6E,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAOE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAE/D,OAAO,CAACyD,IAA/B;AAAA,wCACYU,WAAW,CAACO,KAAZ,CAAkBC,OAD9B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,eAUE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAE3E,OAAO,CAACyD,IAA/B;AAAA,uCACWU,WAAW,CAACO,KAAZ,CAAkBE,MAD7B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF,eAcE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAE5E,OAAO,CAACyD,IAA/B;AAAA,0BACGU,WAAW,CAACI,GAAZ,CAAgBP,SAAhB,CAA0BP;AAD7B;AAAA;AAAA;AAAA;AAAA,sBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAmBE,QAAC,SAAD;AACE,cAAA,SAAS,EAAEzD,OAAO,CAACiE,KADrB;AAEE,cAAA,KAAK,EAAEE,WAAW,CAACI,GAAZ,CAAgBP,SAAhB,CAA0BE;AAFnC;AAAA;AAAA;AAAA;AAAA,oBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AA6BD,OA9BD,CADD,gBAiCC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GA0CChD,OAAO,IACPF,SAAS,KAAK,IADd,iBAEE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,GAAxB;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA,kBAA0BE,OAAO,CAACX,QAAR,CAAiB8B;AAA3C;AAAA;AAAA;AAAA;AAAA,cADF,EAEGjB,eAAe,CAAC+C,WAAhB,CAA4BC,MAA5B,GAAqC,CAArC,GACChD,eAAe,CAAC+C,WAAhB,CAA4BE,GAA5B,CAAiCF,WAAD,IAAiB;AAC/C,4BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAE,EAAV;AAAA,qBACG5E,MAAM,CAAC,IAAIkD,IAAJ,CAAS0B,WAAW,CAACG,IAArB,CAAD,EAA6BnF,iBAA7B,CADT,eAEE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAEa,OAAO,CAACwD,IAAzB;AAAA,oCACE,QAAC,WAAD;AAAA,sCACE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAExD,OAAO,CAACyD,IAA/B;AAAA,2BACGU,WAAW,CAACI,GAAZ,CAAgBC,SADnB,EAEGtF,OAAO,CAAC2E,OAFX,OAEqB,EAFrB,EAGGM,WAAW,CAACI,GAAZ,CAAgBE,SAHnB,EAIGvF,OAAO,CAAC6E,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAOE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAE/D,OAAO,CAACyD,IAA/B;AAAA,wCACYU,WAAW,CAACO,KAAZ,CAAkBC,OAD9B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,eAUE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAE3E,OAAO,CAACyD,IAA/B;AAAA,uCACWU,WAAW,CAACO,KAAZ,CAAkBE,MAD7B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF,eAcE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAE5E,OAAO,CAACyD,IAA/B;AAAA,0BACGU,WAAW,CAACI,GAAZ,CAAgBP,SAAhB,CAA0BP;AAD7B;AAAA;AAAA;AAAA;AAAA,sBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAmBE,QAAC,SAAD;AACE,cAAA,SAAS,EAAEzD,OAAO,CAACiE,KADrB;AAEE,cAAA,KAAK,EAAEE,WAAW,CAACI,GAAZ,CAAgBP,SAAhB,CAA0BE;AAFnC;AAAA;AAAA;AAAA;AAAA,oBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AA6BD,OA9BD,CADD,gBAiCC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAzGN;AAAA,kBADF;AAoJD,CAnQD;;GAAMvE,O;UAEYP,S;;;KAFZO,O;AAqQN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"./styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport addDays from \"date-fns/addDays\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\n\nconst Weather = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isToday, setIsToday] = useState(true);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n\n  //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    getToday();\n  }, []);\n\n  const getToday = () => {\n    setIsForecast(false);\n    setIsHistory(false);\n    axios\n      .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n      .then((data) => {\n        setWeather(data.data);\n        setIsToday(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  //Search event\n  const weatherInput = (e) => {\n    setInput(e.target.value);\n  };\n\n  const searchWeather = () => {\n    if (isToday === true) {\n      axios\n        .get(`${process.env.REACT_APP_WEATHER_API}=${input}`)\n        .then((data) => {\n          console.log(data.data);\n          setWeather(data.data);\n        });\n    }\n    if (isForecast === true) {\n      axios\n        .get(`${process.env.REACT_APP_FORECAST_API}=${input}`)\n        .then((data) => {\n          console.log(data.data.location.name);\n          setForecast(data.data);\n          setLocation(data.data.location.name);\n          getForecast();\n        });\n    }\n  };\n\n  const getForecast = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    axios\n      .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n      .then((data) => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        setIsForecast(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getHistory = () => {\n    setIsToday(false);\n    setIsForecast(false);\n    const newDate = new Date();\n    const minusSeven = addDays(new Date(newDate), -7)\n      .toISOString()\n      .split(\"T\")[0];\n    axios\n      .get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=${minusSeven}`)\n      .then((data) => {\n        setHistory(data.data);\n\n        setHistoryForecast(data.data.forecast);\n        setIsHistory(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <>\n      <Grid container spacing=\"2\">\n        <Grid item xs={6} className={classes.row}></Grid>\n        <Grid item xs={6}>\n          <input onChange={weatherInput} type=\"text\" />\n          <button onClick={searchWeather}>Search</button>\n        </Grid>\n        <Tabs\n          value={activeTab}\n          indicatorColor=\"primary\"\n          textColor=\"secondary\"\n          onChange={handleTabChange}\n          aria-label=\"Family tab\"\n          variant=\"scrollable\"\n        >\n          <Tab\n            label={t(\"detailsPage.tabs.memberOptions\")}\n            value={0}\n            href=\"#MemberOptions\"\n            id=\"Tab0\"\n          />\n          {admin_of.includes(clubId) && (\n            <Tab\n              label={t(\"detailsPage.tabs.members\")}\n              value={1}\n              id=\"Tab1\"\n              href=\"#Members\"\n            />\n          )}\n        </Tabs>\n\n        <button onClick={getToday}>Today</button>\n        <button onClick={getForecast}>Next 3 Days</button>\n        <button onClick={getHistory}>History</button>\n        {weather && isToday === true && (\n          <Grid xs={12}>\n            <Typography variant=\"h2\">Today</Typography>\n            <Card className={classes.root}>\n              <CardContent>\n                <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                  {weather.location.name}\n                </Typography>\n                <Typography variant=\"h5\" className={classes.text}>\n                  {weather.location.country}\n                </Typography>\n                <Typography className={classes.text}>\n                  {weather.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                  {weather.current.temp_f} {SYMBOLS.FAHRENHEIT}\n                </Typography>\n                <Typography className={classes.text}>\n                  {weather.current.condition.text}\n                </Typography>\n              </CardContent>\n              <CardMedia\n                className={classes.media}\n                image={weather.current.condition.icon}\n              />\n            </Card>\n          </Grid>\n        )}\n      </Grid>\n      {forecast && isForecast === true ? (\n        <Grid container spacing=\"2\">\n          <Typography variant=\"h2\">\n            Next 3 Days for {forecast.location.name}\n          </Typography>\n          {dailyForecast.forecastday.length > 0 ? (\n            dailyForecast.forecastday.map((forecastday) => {\n              return (\n                <Grid xs={12}>\n                  {format(new Date(forecastday.date), SHORT_DATE_FORMAT)}\n                  <Card className={classes.root}>\n                    <CardContent>\n                      <Typography className={classes.text}>\n                        {forecastday.day.avgtemp_c}\n                        {SYMBOLS.DEGREES} {\"\"}\n                        {forecastday.day.avgtemp_f}\n                        {SYMBOLS.FAHRENHEIT}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunrise: {forecastday.astro.sunrise}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunset: {forecastday.astro.sunset}\n                      </Typography>\n\n                      <Typography className={classes.text}>\n                        {forecastday.day.condition.text}\n                      </Typography>\n                    </CardContent>\n                    <CardMedia\n                      className={classes.media}\n                      image={forecastday.day.condition.icon}\n                    />\n                  </Card>\n                </Grid>\n              );\n            })\n          ) : (\n            <Typography>No forecast found</Typography>\n          )}\n        </Grid>\n      ) : (\n        history &&\n        isHistory === true && (\n          <Grid container spacing=\"2\">\n            <Typography variant=\"h2\">{history.location.name}</Typography>\n            {historyForecast.forecastday.length > 0 ? (\n              historyForecast.forecastday.map((forecastday) => {\n                return (\n                  <Grid xs={12}>\n                    {format(new Date(forecastday.date), SHORT_DATE_FORMAT)}\n                    <Card className={classes.root}>\n                      <CardContent>\n                        <Typography className={classes.text}>\n                          {forecastday.day.avgtemp_c}\n                          {SYMBOLS.DEGREES} {\"\"}\n                          {forecastday.day.avgtemp_f}\n                          {SYMBOLS.FAHRENHEIT}\n                        </Typography>\n                        <Typography className={classes.text}>\n                          Sunrise: {forecastday.astro.sunrise}\n                        </Typography>\n                        <Typography className={classes.text}>\n                          Sunset: {forecastday.astro.sunset}\n                        </Typography>\n\n                        <Typography className={classes.text}>\n                          {forecastday.day.condition.text}\n                        </Typography>\n                      </CardContent>\n                      <CardMedia\n                        className={classes.media}\n                        image={forecastday.day.condition.icon}\n                      />\n                    </Card>\n                  </Grid>\n                );\n              })\n            ) : (\n              <Typography>No forecast found</Typography>\n            )}\n          </Grid>\n        )\n      )}\n    </>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}