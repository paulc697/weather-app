{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport WeatherCard from \"../../Components/WeatherCard/WeatherCard\";\nimport HourlyWeather from \"../../Components/HourlyWeather/HourlyWeather\";\nimport Box from \"@material-ui/core/Box\";\nimport styled from 'styled-components';\nimport device from '../../responsive/Device';\nconst Forecasts = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  margin-top: 20px;\n  padding-bottom: 20px;\n  @media ${device.laptop} {\n    order: 4;\n  }\n`;\n_c = Forecasts;\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  margin: 20px 0;\n  overflow: hidden;\n`;\n_c2 = ForecastWrapper;\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  top: 20px;\n\n`;\n\nconst Forecast = () => {\n  _s();\n\n  const classes = useStyles();\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [activeTab, setActiveTab] = useState(0);\n  const getForecast = useCallback(async () => {\n    axios.get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`).then(data => {\n      setForecast(data.data);\n      setDailyForecast(data.data.forecast);\n      console.log(data.data.forecast);\n      setIsForecast(true);\n    }).catch(error => console.log(error));\n  }, [days, location]);\n  useEffect(() => {\n    getForecast();\n  }, [getForecast]);\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      className: classes.margin,\n      children: forecast && /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: [\"Forecast for \", forecast.location.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), isForecast === true ? /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Tabs, {\n            value: activeTab,\n            indicatorColor: \"primary\",\n            textColor: \"primary\",\n            onChange: handleTabChange,\n            \"aria-label\": \"Weather Tab\",\n            variant: \"scrollable\",\n            children: dailyForecast.forecastday.map((forecastday, index) => {\n              return /*#__PURE__*/_jsxDEV(Tab, {\n                label: format(new Date(forecastday.date), SHORT_DATE_FORMAT)\n              }, `${forecastday.date}_tab_${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No forecast Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      mb: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.margin,\n        children: isForecast === true ? dailyForecast.forecastday.map((forecastday, index) => {\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: activeTab === index && /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(WeatherCard, {\n                  tabNumber: index,\n                  forecastday: forecastday\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(ForecastWrapper, {\n                children: /*#__PURE__*/_jsxDEV(Forecasts, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"Forecast by hour\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(HourlyWeather, {\n                    tabNumber: index,\n                    forecastday: forecastday\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 21\n            }, this)\n          }, `display_weather_details_${forecastday.date}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No forecast Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Forecast, \"AMOdUgsODAoWfFYQoabhbsbdtf0=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = Forecast;\nexport default Forecast;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Forecasts\");\n$RefreshReg$(_c2, \"ForecastWrapper\");\n$RefreshReg$(_c3, \"Forecast\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Forecast/Forecast.js"],"names":["React","useEffect","useState","useCallback","axios","Typography","SHORT_DATE_FORMAT","useStyles","Grid","format","Tab","Tabs","WeatherCard","HourlyWeather","Box","styled","device","Forecasts","div","laptop","ForecastWrapper","Results","Forecast","classes","forecast","setForecast","location","setLocation","days","isForecast","setIsForecast","dailyForecast","setDailyForecast","activeTab","setActiveTab","getForecast","get","process","env","REACT_APP_FORECAST_API","then","data","console","log","catch","error","handleTabChange","event","newValue","margin","name","forecastday","map","index","Date","date"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SHORT_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport WeatherCard from \"../../Components/WeatherCard/WeatherCard\";\nimport HourlyWeather from \"../../Components/HourlyWeather/HourlyWeather\";\nimport Box from \"@material-ui/core/Box\";\nimport styled from 'styled-components';\nimport device from '../../responsive/Device';\n\nconst Forecasts = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  margin-top: 20px;\n  padding-bottom: 20px;\n  @media ${device.laptop} {\n    order: 4;\n  }\n`;\n\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  margin: 20px 0;\n  overflow: hidden;\n`;\n\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  top: 20px;\n\n`;\n\n\nconst Forecast = () => {\n  const classes = useStyles();\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState(\"belfast\");\n  const [days] = useState(3);\n  const [isForecast, setIsForecast] = useState(false);\n  const [dailyForecast, setDailyForecast] = useState({});\n  const [activeTab, setActiveTab] = useState(0);\n\n  const getForecast = useCallback(async () => {\n    axios\n      .get(`${process.env.REACT_APP_FORECAST_API}=${location}&days=${days}`)\n      .then((data) => {\n        setForecast(data.data);\n        setDailyForecast(data.data.forecast);\n        console.log(data.data.forecast);\n        setIsForecast(true);\n      })\n\n      .catch((error) => console.log(error));\n  }, [days, location]);\n\n  useEffect(() => {\n    getForecast();\n  }, [getForecast]);\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <>\n      <Grid container spacing=\"2\" className={classes.margin}>\n        {forecast && (\n          <Grid>\n            <Typography variant=\"h2\">\n              Forecast for {forecast.location.name}\n            </Typography>\n            {isForecast === true ? (\n              <Grid item xs={12}>\n                <Tabs\n                  value={activeTab}\n                  indicatorColor=\"primary\"\n                  textColor=\"primary\"\n                  onChange={handleTabChange}\n                  aria-label=\"Weather Tab\"\n                  variant=\"scrollable\"\n                >\n                  {dailyForecast.forecastday.map((forecastday, index) => {\n                    return (\n                      <Tab\n                        key={`${forecastday.date}_tab_${index}`}\n                        label={format(\n                          new Date(forecastday.date),\n                          SHORT_DATE_FORMAT\n                        )}\n                      />\n                    );\n                  })}\n                </Tabs>\n              </Grid>\n            ) : (\n              <Typography>No forecast Available</Typography>\n            )}\n          </Grid>\n        )}\n      </Grid>\n\n      <Box mt={2} mb={2}>\n        <Grid item xs={12} className={classes.margin}>\n          {isForecast === true ? (\n            dailyForecast.forecastday.map((forecastday, index) => {\n              return (\n                <React.Fragment\n                  key={`display_weather_details_${forecastday.date}`}\n                >\n                  {activeTab === index && (\n                    <Grid container spacing={2}>\n                      <Grid item xs={12}>\n                        <WeatherCard\n                          tabNumber={index}\n                          forecastday={forecastday}\n                        />\n                      </Grid>\n                        \n                          <ForecastWrapper>\n                          <Forecasts>\n                              <Typography>Forecast by hour</Typography>\n                        <HourlyWeather\n                          tabNumber={index}\n                          forecastday={forecastday}\n                        />\n                          </Forecasts>\n                          </ForecastWrapper>\n\n                    </Grid>\n                  )}\n                </React.Fragment>\n              );\n            })\n          ) : (\n            <Typography>No forecast Available</Typography>\n          )}\n        </Grid>\n      </Box>\n    </>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}