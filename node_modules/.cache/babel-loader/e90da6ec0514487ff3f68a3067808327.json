{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/Today/Today.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\n\nconst Today = () => {\n  _s();\n\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null); // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n\n  const [location] = useState(\"belfast\");\n  const [isToday, setIsToday] = useState(true); //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n\n  useEffect(() => {\n    const getToday = () => {\n      axios.get(`${process.env.REACT_APP_WEATHER_API}=${location}`).then(data => {\n        setWeather(data.data);\n        setIsToday(true);\n      }).catch(error => console.log(error));\n    };\n\n    getToday();\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: weather && isToday === true && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 0,\n        className: classes.paper,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h4\",\n              className: classes.text,\n              children: [weather.location.name, \"     \", \"\", \"  \", weather.location.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n              className: classes.media,\n              image: weather.current.condition.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.text,\n                children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", weather.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"h4\",\n            className: classes.text,\n            children: weather.location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            className: classes.text,\n            children: weather.location.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: [weather.current.temp_c, \" \", SYMBOLS.DEGREES, \" \", \"\", weather.current.temp_f, \" \", SYMBOLS.FAHRENHEIT]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: weather.current.condition.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n          className: classes.media,\n          image: weather.current.condition.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Today, \"nDZAtfn13UbPEJQnjHEe4gOxHqo=\", false, function () {\n  return [useStyles];\n});\n\n_c = Today;\nexport default Today;\n\nvar _c;\n\n$RefreshReg$(_c, \"Today\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/Today/Today.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","useStyles","Geocode","Grid","Paper","Today","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API","classes","weather","setWeather","location","isToday","setIsToday","getToday","get","REACT_APP_WEATHER_API","then","data","catch","error","console","log","paper","text","name","country","media","current","condition","icon","temp_c","DEGREES","temp_f","FAHRENHEIT","root"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Geocode from \"react-geocode\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\n\nconst Today = () => {\n  Geocode.setApiKey(`${process.env.REACT_APP_GOOGLE_MAPS_API}`);\n  const classes = useStyles();\n  const [weather, setWeather] = useState(null);\n  // const [latitude, setLatitude] = useState(\"\");\n  // const [longitude, setLongitude] = useState(\"\");\n  const [location] = useState(\"belfast\");\n  const [isToday, setIsToday] = useState(true);\n\n  //Geolocation\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     setLatitude(position.coords.latitude);\n  //     setLongitude(position.coords.longitude);\n  //   });\n  //   Geocode.fromLatLng(latitude, longitude).then(\n  //     (response) => {\n  //       const address = response.results[0].formatted_address;\n  //       setLocation(address);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // });\n  useEffect(() => {\n    const getToday = () => {\n      axios\n        .get(`${process.env.REACT_APP_WEATHER_API}=${location}`)\n        .then((data) => {\n          setWeather(data.data);\n          setIsToday(true);\n        })\n        .catch((error) => console.log(error));\n    };\n    getToday();\n  }, [location]);\n  return (\n    <Grid container spacing={2}>\n      {weather && isToday === true && (\n        <Grid item xs={12}>\n          <Typography variant=\"h2\">Today</Typography>\n\n          <Paper elevation={0} className={classes.paper}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                  {weather.location.name}     {\"\"}  {weather.location.country}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid container spacing={1}>\n              <Grid item xs={4}>\n                <CardMedia\n                    className={classes.media}\n                    image={weather.current.condition.icon}\n                />\n                <Grid item xs={4}>\n                  <Typography className={classes.text}>\n                    {weather.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                    {weather.current.temp_f} {SYMBOLS.FAHRENHEIT}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Paper>\n\n\n\n          <Card className={classes.root}>\n            <CardContent>\n              <Typography gutterBottom variant=\"h4\" className={classes.text}>\n                {weather.location.name}\n              </Typography>\n              <Typography variant=\"h5\" className={classes.text}>\n                {weather.location.country}\n              </Typography>\n              <Typography className={classes.text}>\n                {weather.current.temp_c} {SYMBOLS.DEGREES} {\"\"}\n                {weather.current.temp_f} {SYMBOLS.FAHRENHEIT}\n              </Typography>\n              <Typography className={classes.text}>\n                {weather.current.condition.text}\n              </Typography>\n            </CardContent>\n            <CardMedia\n              className={classes.media}\n              image={weather.current.condition.icon}\n            />\n          </Card>\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Today;\n"]},"metadata":{},"sourceType":"module"}