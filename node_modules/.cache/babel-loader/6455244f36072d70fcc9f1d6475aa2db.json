{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulcunningham/react-projects/weather-app/src/Pages/History/History.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, VALID_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst History = () => {\n  _s();\n\n  const classes = useStyles();\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [location, setLocation] = useState(\"belfast\");\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({}); // const [date, setDate] = useState(\n  //   format(new Date(selectedDate), VALID_DATE_FORMAT)\n  // );\n  // const getHistory = () => {\n  //   // const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n  //   // setDate(newDate);\n  //   axios\n  //     .get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=2021-01-01`)\n  //     .then((data) => {\n  //       setHistory(data.data.forecast);\n  //       setHistoryForecast(data.data.forecast);\n  //       console.log(data.data.forecast);\n  //       setIsHistory(true);\n  //     })\n  //     .catch((error) => console.log(error));\n  // };\n  // useEffect(() => {\n  //   getHistory();\n  // });\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: \"2\",\n    children: history && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: \"2\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: \"history\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(History, \"zQCdSHyc5WKKECoNn32hI688ltI=\", false, function () {\n  return [useStyles];\n});\n\n_c = History;\nexport default History;\n\nvar _c;\n\n$RefreshReg$(_c, \"History\");","map":{"version":3,"sources":["/Users/paulcunningham/react-projects/weather-app/src/Pages/History/History.js"],"names":["React","useEffect","useState","axios","Card","CardContent","CardMedia","Typography","SYMBOLS","VALID_DATE_FORMAT","useStyles","Grid","format","KeyboardDatePicker","History","classes","selectedDate","handleDateChange","Date","location","setLocation","isHistory","setIsHistory","history","setHistory","historyForecast","setHistoryForecast"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,OAAT,EAAkBC,iBAAlB,QAA2C,2BAA3C;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAMC,OAAO,GAAGL,SAAS,EAAzB;AACA,QAAM,CAACM,YAAD,EAAeC,gBAAf,IAAmCf,QAAQ,CAAC,IAAIgB,IAAJ,EAAD,CAAjD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,SAAD,CAAxC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACuB,eAAD,EAAkBC,kBAAlB,IAAwCxB,QAAQ,CAAC,EAAD,CAAtD,CANoB,CAOpB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAC,GAAxB;AAAA,cACGqB,OAAO,iBACN,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,GAAxB;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAsDD,CAnFD;;GAAMT,O;UACYJ,S;;;KADZI,O;AAqFN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SYMBOLS, VALID_DATE_FORMAT } from \"../../Constants/Constants\";\nimport useStyles from \"../styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport format from \"date-fns/format\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst History = () => {\n  const classes = useStyles();\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [location, setLocation] = useState(\"belfast\");\n  const [isHistory, setIsHistory] = useState(false);\n  const [history, setHistory] = useState(null);\n  const [historyForecast, setHistoryForecast] = useState({});\n  // const [date, setDate] = useState(\n  //   format(new Date(selectedDate), VALID_DATE_FORMAT)\n  // );\n\n  // const getHistory = () => {\n  //   // const newDate = new Date(selectedDate).toISOString().split(\"T\")[0];\n  //   // setDate(newDate);\n  //   axios\n  //     .get(`${process.env.REACT_APP_HISTORY_API}=${location}&dt=2021-01-01`)\n  //     .then((data) => {\n  //       setHistory(data.data.forecast);\n  //       setHistoryForecast(data.data.forecast);\n  //       console.log(data.data.forecast);\n  //       setIsHistory(true);\n  //     })\n  //     .catch((error) => console.log(error));\n  // };\n\n  // useEffect(() => {\n  //   getHistory();\n  // });\n\n  return (\n    <Grid container spacing=\"2\">\n      {history && (\n        <Grid container spacing=\"2\">\n          <Typography variant=\"h2\">history</Typography>\n          {/* {historyForecast.forecastday.length > 0 ? (\n            historyForecast.forecastday.map((forecastday) => {\n              return (\n                <Grid xs={12}>\n                  <Grid xs={12}>\n                    <KeyboardDatePicker\n                      label=\"Select Date\"\n                      clearable\n                      maxDate={new Date()}\n                      format=\"yyyy/MM/dd\"\n                      value={selectedDate}\n                      onChange={(date) => handleDateChange(date)}\n                    />\n                  </Grid>\n                  {format(new Date(forecastday.date), VALID_DATE_FORMAT)}\n                  <Card className={classes.root}>\n                    <CardContent>\n                      <Typography className={classes.text}>\n                        {forecastday.day.avgtemp_c}\n                        {SYMBOLS.DEGREES} {\"\"}\n                        {forecastday.day.avgtemp_f}\n                        {SYMBOLS.FAHRENHEIT}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunrise: {forecastday.astro.sunrise}\n                      </Typography>\n                      <Typography className={classes.text}>\n                        Sunset: {forecastday.astro.sunset}\n                      </Typography>\n\n                      <Typography className={classes.text}>\n                        {forecastday.day.condition.text}\n                      </Typography>\n                    </CardContent>\n                    <CardMedia\n                      className={classes.media}\n                      image={forecastday.day.condition.icon}\n                    />\n                  </Card>\n                </Grid>\n              );\n            })\n          ) : (\n            <Typography>No forecast found</Typography>\n          )} */}\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default History;\n"]},"metadata":{},"sourceType":"module"}